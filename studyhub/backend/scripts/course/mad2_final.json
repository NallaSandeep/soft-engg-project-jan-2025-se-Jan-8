{
    
    "course": {
        "course_id": 2,
        "code": "MAD201",
        "title": "Modern Application Development - II",
        "description": "An advanced course that dives deep into modern frontend development using JavaScript and Vue.js, focusing on building dynamic, interactive web applications. The course emphasizes the principles of reactive programming, component-based architecture, and advanced client-side state management. It covers essential techniques for working with the Document Object Model (DOM), handling asynchronous operations, and applying best practices in frontend architecture and design. Students will gain hands-on experience through practical implementations and real-world projects.",
        "instructor_id": 1002,
        "credits": 3,
        "department": "Computer Science",
        "image_url": "/assets/courses/mad2/cover.jpg",
        "prerequisites": [
        "MAD-I (Modern Application Development - I)",
        "Basic understanding of HTML and CSS",
        "Familiarity with Python or another programming language"
        ],
        "learning_outcomes": [
        "Design and develop modern web applications using JavaScript and Vue.js",
        "Implement reactive programming concepts for building dynamic user interfaces",
        "Create and manage reusable Vue.js components with effective state management",
        "Apply advanced JavaScript techniques such as functional programming and iteration",
        "Handle asynchronous operations using callbacks, promises, and async/await",
        "Optimize frontend performance and maintain application scalability",
        "Understand and implement best practices for frontend architecture and design patterns"
        ],
        "assessment_methods": [
        "Quizzes","Project","End-term"
        ],
        "delivery_mode": "Online",
        "tools_and_technologies": [
        "JavaScript (ES6+)",
        "Vue.js Framework (Composition API and Options API)",
        "HTML5 and CSS3",
        "Developer Tools (Repl.it, VS Code)",
        "Git for version control",
        "Browser-based debugging techniques"
        ],
        "LLM_Summary": {
        "summary": "An advanced, project-driven course focused on modern web application development using JavaScript and the Vue.js framework. The course emphasizes the practical implementation of reactive programming principles, component-based architecture, and client-side state management. Through hands-on exercises and real-world examples, students will master core JavaScript functionalities, advanced iteration techniques, and asynchronous programming patterns. The curriculum also includes best practices for frontend performance optimization, architectural design patterns, and building scalable, maintainable applications. By the end of the course, students will be able to create sophisticated, interactive web applications using cutting-edge technologies and design methodologies.",
        "concepts_covered": [
            "JavaScript fundamentals and ES6+ syntax",
            "Vue.js framework (Composition API and Options API)",
            "Reactive programming and reactivity system",
            "Component-based development and modular design",
            "Client-side state management (local and global)",
            "Advanced iteration methods (map, filter, reduce)",
            "Asynchronous programming (callbacks, promises, async/await)",
            "DOM manipulation and event handling",
            "Declarative vs. imperative programming paradigms",
            "Frontend design patterns (MVC vs. MVVM)",
            "Component communication (props, events, emit)",
            "Handling and optimizing component lifecycles",
            "Performance optimization and memory management",
            "Error handling and debugging strategies",
            "Building scalable and maintainable web applications"
        ],
        "concepts_not_covered": [
            "Backend development (APIs, databases)",
            "Full-stack architecture and integrations",
            "Advanced server-side rendering (SSR)",
            "Database design and query optimization",
            "DevOps practices and CI/CD pipelines",
            "Security practices in web applications"
        ]
        }
    }
    ,
     "weeks": [
    {
      "week_id": 1,
      "course_id": 2,
      "order": 1,
      "title": "Week 1: JavaScript Fundamentals",
      "estimated_hours": 25,
      "LLM_Summary": {
        "summary": "This week lays a strong foundation in JavaScript by exploring its origins, core syntax, and language fundamentals. The lectures cover the historical development of JavaScript and its standardization under ECMAScript, detailing how the language evolved to meet web development needs. Key topics include the use of variable declarations (var, let, and const), dynamic typing, and the nuances of type coercion and comparison operators. The material emphasizes how JavaScript interacts with the Document Object Model (DOM) for dynamic web page manipulation and introduces basic control structures and function types. Together, these lectures provide an extensive overview of JavaScriptâ€™s core principles, preparing learners for more advanced topics such as asynchronous programming and modern frameworks.",
        "concepts_covered": [
          "Historical context and origins of JavaScript",
          "JavaScript vs. ECMAScript and standardization",
          "Core syntax and language structure",
          "Variable declarations: var, let, const",
          "Scope management: block-level vs. function-level scoping",
          "Dynamic typing and implicit type coercion",
          "Comparison operators: loose (==) vs. strict (===)",
          "Interaction with the Document Object Model (DOM)",
          "String manipulation and template literals",
          "Best practices for naming identifiers and avoiding reserved words",
          "Primitive and complex data types",
          "Control flow constructs and function declarations",
          "Anonymous functions, arrow functions, and IIFEs",
          "Asynchronous programming basics and browser compatibility strategies"
        ],
        "concepts_not_covered": [
          "JavaScript engine internals and garbage collection",
          "Advanced performance optimization techniques",
          "Security vulnerabilities and mitigation strategies",
          "Deep functional programming paradigms",
          "Design patterns in JavaScript beyond basic modularity"
        ]
      }
    },
    {
      "week_id": 2,
      "course_id": 2,
      "order": 2,
      "title": "Week 2: JavaScript Collections and Modularity",
      "estimated_hours": 25,
      "LLM_Summary": {
        "summary": "This week focuses on advanced data handling and modularity in JavaScript. The lectures dive into JavaScript collections such as arrays and the extensive use of iteration techniques, including higher-order functions like map, filter, and reduce. Topics such as destructuring and generators are discussed to highlight functional programming approaches and cooperative concurrency. Additionally, the material covers modern module systems, comparing ES6 module syntax with CommonJS and AMD formats, and demonstrates how to use Node Package Manager (npm) to manage dependencies. The session also explores object-oriented programming in JavaScript, including prototype-based inheritance, class syntax, and asynchronous execution through the event loop. Overall, this week equips students with both practical techniques for manipulating collections and a robust understanding of JavaScript modularity and object design.",
        "concepts_covered": [
          "JavaScript array structure and dynamic typing",
          "Array methods and handling holes",
          "Iteration protocols and loop alternatives",
          "Higher-order functions: map, filter, reduce",
          "Destructuring syntax for arrays and objects",
          "Generators and cooperative concurrency",
          "Functional programming paradigms",
          "Custom comparator functions for array sorting",
          "Performance considerations and best practices",
          "ES6 module syntax and import/export mechanisms",
          "CommonJS and AMD module formats",
          "Using Node Package Manager (npm)",
          "Object literals and object methods",
          "The 'this' keyword and context binding",
          "Prototype-based inheritance and class syntax",
          "Calling 'super()' for inheritance",
          "Event loop, call stack, and asynchronous execution"
        ],
        "concepts_not_covered": [
          "Advanced error handling and exception management",
          "Design patterns for scalable modular architecture",
          "Reactive programming paradigms",
          "Integration with backend APIs",
          "Security considerations in module design"
        ]
      }
    },
    {
      "week_id": 3,
      "course_id": 2,
      "order": 3,
      "title": "Week 3: Frontend Implementation",
      "estimated_hours": 25,
      "LLM_Summary": {
        "summary": "This week explores frontend implementation with an emphasis on architectural design and best practices. The lectures cover the fundamental differences between frontend and backend responsibilities, detailing how user interface (UI) and user experience (UX) are shaped by both imperative and declarative programming paradigms. Topics include state management, responsive and adaptive design principles, and the use of component-based architecture to build dynamic interfaces. Additionally, best practices for performance optimization, accessibility, and asynchronous programming are examined. The combined material provides practical insights into designing scalable, maintainable, and user-friendly web applications, while also addressing the challenges of cross-browser compatibility and efficient resource management.",
        "concepts_covered": [
          "Frontend vs. backend responsibilities",
          "UI vs. UX considerations",
          "Stateless nature of HTTP and session management",
          "Imperative vs. declarative programming paradigms",
          "Component-based architecture and reusability",
          "Two-way data binding in modern frameworks",
          "State management and synchronization",
          "MVC vs. MVVM architectural patterns",
          "Responsive and adaptive design principles",
          "Performance optimization in frontend systems",
          "Web performance optimization techniques",
          "Lazy loading and code splitting",
          "Caching strategies and CDNs",
          "Accessibility guidelines and WCAG compliance",
          "Responsive design implementation using media queries and fluid grids",
          "Asynchronous programming (callbacks, promises, async/await)",
          "Security best practices in frontend development",
          "Cross-browser compatibility and testing"
        ],
        "concepts_not_covered": [
          "Progressive Web Apps (PWAs)",
          "Advanced client-side routing and state synchronization",
          "Complex animations and micro-interactions",
          "Integration with third-party services",
          "Real-time data handling and synchronization"
        ]
      }
    },
    {
      "week_id": 4,
      "course_id": 2,
      "order": 4,
      "title": "Week 4: Vue.js and Reactive Programming",
      "estimated_hours": 25,
      "LLM_Summary": {
        "summary": "This week focuses on Vue.js and the principles of reactive programming to build modern, dynamic web applications. The lectures begin by introducing the core concepts of Vueâ€™s reactivity system, demonstrating how Vue components are created, how data binding works, and how props and events facilitate communication between components. The material explains the importance of separating local and global state, and how Vueâ€™s virtual DOM optimizes updates. Building on these fundamentals, the content advances into sophisticated component architectures, exploring computed properties, watchers, and the Vuex state management pattern for scalable applications. The lectures also cover performance optimization and debugging techniques in Vue, offering a comprehensive guide to developing maintainable and responsive interfaces using the latest Vue.js practices.",
        "concepts_covered": [
          "Vue.js reactivity system and data tracking",
          "Creating and using Vue components",
          "Component communication via props and events",
          "Data binding techniques (v-bind, v-model)",
          "Local vs. global state management",
          "Component-specific data isolation",
          "Dynamic content handling with slots",
          "Virtual DOM and performance optimization",
          "Advanced component architecture and reusability",
          "Scoped slots and dynamic content",
          "Vue instance and reactivity principles",
          "Computed properties and watchers",
          "Introduction to Vuex state management",
          "Vuex store: state, mutations, actions, and getters",
          "Managing global vs. local state",
          "Performance optimization and debugging in Vue"
        ],
        "concepts_not_covered": [
          "Server-side rendering (SSR) with Vue",
          "Nuxt.js and advanced framework integrations",
          "Progressive Web App (PWA) development with Vue",
          "Advanced animations and transitions in Vue",
          "Integration with backend APIs for full-stack development"
        ]
      }
    }
  ],

    "lectures": [
      {
        "lecture_id": 1,
        "week_id": 1,
        "order": 1,
        "title": "Introduction to JavaScript: History and Origins",
        "resource_type": "youtube",
        "video_url": "https://www.youtube.com/watch?v=A1UMI9rfZ8Q&t=1s",
        "content_transcript": "Hello everyone, welcome to modern applicationdevelopment part two. So, now we are going to get into the syntax of javascript and thisis I am going to go fairly quickly through most of this uh what I will be doing is sortof giving a rough presentation of some of the concepts and then switching over to ademonstration of some parts of it in replit. But the reason why I am sort of going a littlebit quickly through this is because the assumption here is that most of you have some degreeof familiarity with a language like python. So, as we move forward I will sort of tryand make the connection with python as far as I can in most places. If you know a languagelike C or Java that is even better it would make it even easier to learn javascript. Thebasic syntax is actually very straightforward and easy. And what we are looking at is notsort of a complete detailed knowledge of the syntax what we are looking at is a workingknowledge meaning that enough to sort of get started. And then as you find that you know maybe howdo I implement this or how do I do this particular thing you get back and say fine you know maybeI need to learn a little bit more of the syntax . So, that is the approach that we are goingto be taking here and as we move forward you will basically be learning more and more andtrying out different instances and ultimately you know like with any other language theonly way of learning it is to work with it try try the try programming So, the like I already mentioned the basicfront end usage the javascript must be invoked from an html page you do not just write aprogram and run the program so to say. It must be invoked as a script from an html pageonly then it has this concept of a document that is it is associated with. And front-endjavascript is closely tied to the idea of the dom the document object model which meansthat if it is not directly invoked from an html page there is no document and basicallyit cannot execute or rather cannot do anything useful. It is a scripting language there is no compilationstep. So, whatever you type in and you know you create the script that is pretty muchwhat runs just like python. It is also loosely structured structured similar to python. Whatdo I mean by this for those of you who are familiar with C you would know that you knowthe C program needs to start with certain hash includes. It may not have hash includes but you knowif they are there they usually have to be at the top of the program. And then you havethe main function the int main which is going to execute when the program is actually executed.So, that main function has to be there uh certain other things you know I mean it thenhas to have the open braces close braces and within that a sequence of statements. It is a little bit more structured than apython script which could just have a bunch of statements that get executed one afterthe other. Javascript in that sense is closer to python than to C. Now there are certain things called identifiersthey have the sort of the words used in the language and you need to be aware of thesealthough you know you do not have to sort of learn this list by heart. There are a numberof so called reserved words and you can think of obvious reserve words. So, for examplethis word if, is something that you could easily understand would be a reserved word. Function is the equivalent of def in pythonwhich is used in order to define a new function. Then you have certain things which we willcome to more in Javascript there is this thing called let and const which are used in orderto declare variables. And a bunch of other different languages out here there is a whilewhich is used in order to implement while loops. There are certain things like widthand so on. Which you may have come across in python but in javascript have a slightlydifferent meaning . So, it is not that it is a direct one-on-onetranslation from everything that you have seen in python but the basic thing to keepin mind here is that you know there are a few reserved words that you do not reallyneed to think too much about to start with you need to know what they are so, that youcan use them. The most important thing is if something is called a reserved word; donot use that word as the name of a variable. And in general that is liquid advice I meanavoid using the name of anything which you even suspect might be used as part of thelanguage as a variable. So, do not for example try and call a variable delete or del eventhough del is not a reserved word in this case there could be uses of del that you donot really know what it is going to be used for. So, call it something else you can alwaysgive it a different name. If you if in doubt then probably modify thename a little bit so that it is not likely to be a reserve word. There are certain thingscalled literals which are for example true and false and null which we will you knowyou will see a lot of null in Javascript it is basically the equivalent of the none inpython and it is sort of the undefined state. Now these are literals they are not reallykeywords in the sense that they do not start or end the statement they are values thatcan be used in comparisons and so on for assignments. And there are a few other words to avoid forexample you know package, private, public, undefined and async all of these are wordsthat you will see later as we go through code. And generally yeah you know it is uh suggestedthat you avoid them why is does it say avoid because in principle it does not prevent youfrom. So, even redefining these words you have different meanings ah. So, it is always preferable that you sortof keep that in mind and therefore avoid it rather than just sort of flat out saying noyou are not allowed to do this. Now in terms of the structure of the languageone thing to keep in mind is that its can be broadly looked at in terms of statementsand expressions. A statement is a piece of code that can be executed an example is ifsomething do something and that happens within the curly brackets. It could either be a standaloneoperation or it could have certain side effects. By side effect what I mean is maybe you couldhave a console dot log which basically causes something will get printed in the consolebut does not directly affect any of the variables or the data present inside the program. An expression on the other hand is somethingthat can be executed in order to obtain a value to be returned. An example of this isjust x equal to 10. So, this is very clearly you are taking the value 10 and assigningit to x. So, there is an expression there, there is a value that is being returned. Nowthe interesting thing is even a statement like this just hello world is actually anexpression in the sense that it is a value that can be used anywhere that a value ahexpression needs to be used. An example of that is anything that basicallygoes into a function argument. Let us say that you want to add numbers and you definea function called add of x, y x and y basically have to be expressions which means that theycan be evaluated to get certain values. So, the argument for a function for example cannotbe an if statement because this by itself does not return a value that can be then passedinto the function. Whereas hello world just standing by itselfcan be thought of as something that returns itself as the return value and what it meansis it can then be passed into a function. There are a number of so-called primitivedata types in Javascript and these are sort of built into the language. There is somethingcalled undefined and null which are important things that you need to keep in mind as wemove forward but apart but they are not really data types they are sort of special casesthey are what are called non values ok but apart from that there are Boolean true falsenumber. So, there is no int and float separately unlikein language like C, python of course does not specifically mention whether int or floatexcept for that there are certain things in numpy for example right you would have seenthat there is actually a distinction made between ints and float32s and float64s. Javascriptagain does not have that natively it just sort of calls everything a number. It also has something else called bigint whichis used for storing large integers and then of course you know you have strings that canbe used for actually storing and manipulating strings. There are something called objectsand this is something that we will need to spend some time on later we will sort of belooking at in a little bit more detail because it is the basis of how classes and so on areimplemented in javascript. But for now one way to look at it is justthat an object is a compound piece of data it has multiple things sort of put togetherinside it. Now a function is interesting a function basically intuitively we know whata function is like I said add of x, y is something that will take two arguments x and y and itwill return some value. Now the interesting thing about functions in Javascript and thisis also true of functions in python. Although we do not really use it much thereis that a function can be handled like an object meaning that I can take the name ofa function and assign it into a variable and that that variable basically can be used asthe function. Now that can be done in python as well. But in javascript you will find thatit is actually used in that sense a bit more you have this concept of taking a functiondefining it as an anonymous object and then assigning it to a variable that happens alot in javascript. Now they can be handled like objects and ofcourse the interesting thing is you can have you know objects can themselves have functionsinside them. For those of you who are familiar with object oriented object oriented programmingyou would know that you know this is basically called the method of the object of the classthe interesting thing in javascript is a function can have an object associated with it. So, now let us take a you know slightly ahdebate from this go over to the browser and take a look at a demo of you know some ofthe basics of what I have been talking about. So, this is an example of a basic projectthat I have created in replit. In fact if you just go to replit and you say create repland you choose let us say html, css, javascript and you just give it any name that you want.By default it will create something that looks like this which basically has this set offiles it has an index dot html it has a script.js here I have added a lot of material the script.jsby default it will be empty. And there will be a style dot css which onceagain in this case is just empty. Now what that means is what you have on the left handside over here is a set of the files that you have created. You can add your own filesyou can put images in there you can create sub folders hopefully most of you are familiarwith this and have used it at some point either for your flask applications or in some othercontext otherwise it is quite easy to get used to any of it. Now the interesting thing is let us startwith this index dot html. So, it is a you know well defined html file it has a doctypedefined at the at the beginning it has this html slash html closing tag head slash headand body slash body. Now in the head all of this the meta material and so on comes bydefault this is basically what is provided by replit including the link to the stylesheet. So, I have not touched this part at all whathas been done is I have added certain entries out here. So, for example this div that ispresent over here another div that is present over here and lines 14 and 15 which are twomore scripts that have been added. All of these things are parts that are not reallythere in a default replit that will get created I have added them and I will be sort of demonstratingthem as we move forward it sort of makes it easier for me to have these things ready whichis why I have kept it like this. Now what is the bottom line? What you cansee is that you know now if I go look at script.js well it has just one line over here same consoledot log hello console this is sort of the equivalent of the hello world program it isthe first thing that we want to output from our script. You will notice right now thateverything else over here has just basically been commented out I will get to those later. There are also a couple of other scripts thatare also all commented out but let us focus on script dot js for now. So, script dot jshas just this one line console dot log ('Hello console!') and this index dot html by itselfhas well it has a couple of empty div s which are not expected to show anything and it hasthis one thing saying hello world. So, if I look just at the html file what I can expectis inside the body there is some text hello world and there is also some script that isgoing to get loaded. And this is it this line 13 over here whichbasically says script source equal to script dot js slash script is responsible once werun this program for actually loading up that script executing what is inside it and generatingoutput if needed. So, let us think about what is likely to happen the first of course isthat you know what we expect is the html file should at least display this. So, this should show up in the browser thatshould happen on our right out here right. On the right hand side where we have thishttps js hello world and so on, in this right hand side pane we expect to see the html output.Why is it not there because I have not run the program yet. And down here on the righthand side you can see there are two things one is called the console and the other iscalled the shell. The shell is an actual linux terminal youcan actually go type ls see what files are there and so on. But now we are more interestedin the console this is the actual javascript console corresponding to this applicationthat is going to run . So, let us try and run it all I have to do is click on run andit takes a moment and you can see that you know this got updated I can see the helloworld out here on the right hand side. Where did that come from my html directlythis has no javascript involved with it at all but the javascript effect came down herein the console. I can see that hello console got printed down there where did that comefrom from script dot js. So, this line console dot log ('Hello console!') is an example ofa statement it is just you know do this and it by itself does not have any return valueassociated with it. Hello everyone welcome to modernÂ application development part 2. Now the next thing that you need to knowÂ about Javascript is of course how do you add comments and you can see thatÂ just putting like two or more slashes is enough to start a so-called simple commentÂ a single line comment. On the other hand you could also have a multi-line comment which startsÂ with this slash star and ends with star slash. The extra stars over here or the fact that youÂ know it is split across lines in this way are irrelevant all that matters is the slash starÂ at the beginning and the star slash at the end. These are the two things that really matterÂ when you want to have a multi-line comment. So, unlike in python where you just use the hashÂ symbol in order to comment out a given line and there is no concept of a multi-line comment.Comments in Javascript are closer to what you would see in something like C++ or Java you couldÂ have single line comments like this or multi-line comments that look like this. Let us move furtherÂ down. We already talked about identifiers and an example of that would be this statement letÂ x equal to 0. So, x is an identifier over here what is let? let is a reserved word what exactlyÂ does let mean, what does const mean and so on. We will look at that in a little bit more detailÂ later but for the moment it is a reserved word it is not something you canÂ use as a variable identifier. What about const AnotherVariableÂ something else that we declare as var and where it gets really interesting is whenÂ we start looking at what is called Unicode. Now you are already familiar with the idea ofÂ Unicode all that it says is rather than just restricting ourselves to single byte values inÂ order to represent letters which are sufficient for the ASCII the basic Latin alphabet. We can also have like more complex characters from different languages by allowing multipleÂ bytes in order to represent different languages. Now most Javascript engines use Unicode but withÂ a particular format. So, Unicode just talks about code points what are the numbers associated withÂ a given character there is also something called the format for representation and that is eitherÂ utf-8 which is a Unicode transformation format 8-bit which is probably the most popularÂ or utf-16 which uses 16 bit values for the majority of characters or there are a coupleÂ of other different ways as well of doing it. But for whatever reason mostÂ Javascript engines actually use utf-16 as the way of representing charactersÂ inside them. And the interesting thing about this is that you can see that IÂ have actually got a variable out here right which is in the devanagari script andÂ basically has the word sheher. And as far as the solution for that is concerned or rather theÂ solution the value of that is concerned I have put in the value Chennai in the Tamil script . So, I am mixing multiple languages here my let keyword remains in English or at least in theÂ Latin alphabet the variable name is in Devanagari the variable value is in the Tamil script whatÂ happens when I actually run something like this. Now all these let const, var by themselves doÂ not have do not show up on the console nothing will come only this final console dot log isÂ going to generate some output along with of course this first line out here this console dotÂ log ('Hello console!'). I am going to leave that up there and it will be permanently on.Now if I run this what is going to happen, the same the index dot html output remains theÂ same hello console from the first line remains the same and now you can see that console dotÂ log (Sheher) resulted in Chennai being output. So, there are two parts to thisÂ one is it means that you know using different languages in Javascript is looks likeÂ it is fairly easy you can assign like different uh languages to variables uh strings in differentÂ language or different scripts to variables without really having to struggle very much.You could if you wanted also use a different language to declareÂ your variables in the first place. Now this is something I would sort of stronglyÂ recommend against because you need to keep in mind that even though you might be familiar with theÂ language and reading it at the end of the day it is likely to be seen by someone else who may notÂ be able to work with that particular language. Now you could argue that you know about whatÂ about English there may be people who do not understand English, yes but the point isÂ Javascript by its language by its basics requires us to at least be able to recognize theseÂ kinds of keywords. You cannot get around that. So, if that is the case then it is probably betterÂ to use that same minimal set in order to define your identifiers as far as possible.This is not sort of set in stone if you decide that you want to have something whereÂ you are going to declare your variables in your own language that is not forbidden. This isÂ just more of a convention or a suggestion that you know it may be better to sort of tryÂ and use a neutral set of alphabets in order to represent identifiers just to maximize theÂ usability of the code that you are writing. So, I am going to now comment this partÂ out again. Now the next thing that we need to understand when we are talking about uhÂ variables is that there is something called scope. And the scope of a variable basicallyÂ says where is this particular variable visible. In other words if I declare a variable somewhereÂ then is that visible throughout my entire program is it visible to other scripts that areÂ being invoked from the same html file. So, that scope becomes very important becauseÂ one of the biggest problems that we can see as far as scope is concerned is if I am not carefulÂ with scoping I might end up declaring a variable which overlaps with a variable that has beenÂ declared by someone else in some other library. And if I do not have a way of limiting scopeÂ this actually makes programming quite hard. Because you know whoever is creating the libraryÂ in the first place has to be able to use some variable names and there is no way that they canÂ guarantee that you know no one else will ever use that variable name. What is usually done in suchÂ cases is to use an idea of so-called name spaces. So, Javascript does not at this point youÂ know, there are concepts of name spaces you can have sort of uh modules and so onÂ that you could use in order to restrict uh what you know how different names areÂ seen into different parts of the code. But still even within your own code you mightÂ find that you want to restrict certain scopes. So, here is one example and what I am showingÂ over here is I have declared one variable x1 equal to 10 using what is called a var keywordÂ and then I have this just open brackets close brackets it is not a function this is whatÂ is called a block. And inside this block I am going to log the value of x1 I want to basicallyÂ see whether x1 is visible inside the block. And then I am also going to declare x2Â where x2 equal to 30 and outside the block I will sort of output its value to the console. Let us see whether this you know what happensÂ when I do this. And when I run it I find that it actually prints both. So, the console dot logÂ which was there inside the block came out as 10 and the console dot log which is outsideÂ the block came out as 30 and this is a bit worrying because this var x2 the x2 wasÂ defined or declared only inside this block. What this line 24 is telling me is that evenÂ though I declared it inside the block it is now visible outside which means that x2 isÂ now globally present everyone can see it possibly even interfering withÂ other libraries and so on. So, this was problematic and for a long timeÂ even this idea of how do we sort of restrict scope over here was quite difficult to handle.Â Now where I mean I have to sort of qualify that statement a little bit it is not that itÂ can be directly seen by other libraries. What happens is everything which is inside theÂ same function scope can see this which means that anything at the top level script theÂ entire top level script can see that var x2 even though it is declared inside a block. NowÂ on the other hand what Javascript later the newer versions essentially brought in this thingÂ called let which allows you to do almost the same behaviour you can just use let instead of var.And by doing that now what happens when we run this is you find that there is a reference errorÂ x2 is not defined ok at script dot js line 24. So, essentially basically what it is telling youÂ is that this line 24 ran into a problem because x2 is not defined. Why is it not defined becauseÂ this let means that x2 is defined only within the scope of these brackets. So, in other words theÂ primary difference between let and var is let allows you to have more restrictive scoping.It easily allows you to create for example something inside a for loop that will not thenÂ be seen by everything else outside the for loop. There is another thing which is also called constÂ and the idea of const is very similar in this case const will also work exactly the same way as letÂ did. It will give you exactly the same results and the reason is that you know once again as farÂ as const is concerned it has block level scope. And basically the block level scope that itÂ has over here basically means that the line 24 console dot log of x2 is not going to see thisÂ variable x2 that has been declared on line 22. There are other differences between let and consÂ that we will get to in a moment but this idea of scope is something to keep in mind. GeneralÂ rule of thumb avoid using var unless you have a very specific reason to do so. let or const should do the job for you even better than that const should be used inÂ most places because basically what it means is that once you declare something using const thatÂ variable then cannot have its value changed. So, even if you do accidentallyÂ end up sort of reassigning it or something the const will flag it andÂ tell you look there is a problem here. You said it was supposed to be a constantÂ but now you are changing its value. But if you know for sure that you want to actuallyÂ have a variable that can change value use let. So, let us comment that out and get on to strings. So,Â I am going basically going to have this line over here where I just declare let s equal to helloÂ and then console dot log (s) what do I expect it is just going to output this world hello outÂ here. But a string has some additional properties associated with it one of them is calledÂ the length of the string I can also pick out a individual element in theÂ string let us say s [0]. and if I run this what I will find is thatÂ the length of the string is printed out as 5 and s [0] because just like inÂ python we start with 0 indexing of strings and arrays which we will get to later.Â The 0th character is h if I change this to 1 I will find that it should printÂ e and there we have e as s [y]. What happens if I instead try to print out aÂ character a sub string. So, a substring let us look at this notation here it basicallyÂ says s is a string and s dot substring. So, for those who are familiar with python youÂ would immediately recognize that this is sort of a method call and what I am saying is that stringÂ has a method in fact this you know the notation that comes up in replit automatically tells youÂ a fair amount of detail about you know what that substring is. And in this case what is goingÂ to say is it will start from character number 2 and go on till character number 4 butÂ not including character number 4. And let us see what that will print out,Â it basically prints out ll right. So, character number 2 to 4 essentially is this llÂ part of hello. It does not include character number 4 which is the o itself. Now on top of thatÂ what we could do is you know once again I could do something like declaring just going back toÂ the previous example that I had where I said sheher is equal to Chennai and if I lookÂ at sheher dot length I am going to get the length of this string indicating Chennai.And that is actually interesting how do you count the length of such a string becauseÂ if you look at it and count it in Tamil this this is chei and that should be sortÂ of seen as one character this is the in and you then have the nai part of itÂ which should ideally be seen as three characters. But clearly not we can see thatÂ you know this part of it is this I well it is actually being shown as a single character youÂ can only select it as a single character. But the problem is when you finally print outÂ the length you find that it gives the value 6. What this means is that the length of a string isÂ not that clearly defined or it is not that easy to use when we are working with different languages.Â It is clearly defined I mean you can get it from Unicode but why exactly does it end up being sixÂ that depends on how exactly it was represented internally. So, let us move forward and look atÂ this concept of something called templates. So, what is a template as you can see this is basically using the soÂ called backtick operator, the backward code. And any string that starts and ends with aÂ backward code is considered a template string and inside that template string if I have dollarÂ bracket and anything which is basically Javascript and close bracket then it gets logged onto theÂ console it will do the interpolation for you. So, I actually need to have this alsoÂ uncommented. So, that when I run this what I will find is s also needs toÂ be defined and then when I run this I will find that this first thing out here gotÂ interpolated as hello world. And the second string came out as length of well dollar{sheher} whichÂ means that it actually puts in Chennai over here. And I can also compute dollar{sheher} dotÂ length and have that printed out earlier. So, this is sort of a very simple wayÂ by which Javascript allows you to create sort of formatted strings similar to whatÂ would be the python formatted strings. Not a full-blown templating language butÂ useful for creating certain simple outputs. Now let us move forward and look at another conceptÂ that is useful in Javascript called operators an example of an operator is just something likeÂ 3 + 4. So, the plus is the operator out here. What happens when I run something like this itÂ just basically executes a 3 + 4 and prints out 7. In fact let me get rid of thisÂ hello console log out here. Now the next question mightÂ happen what happens when you do 3 + 4 where the 3 and the 4 are put within quotesÂ as you might imagine it is sort of going to treat these as strings and what does plus mean inÂ the context of strings, concatenation. And it is going to take 3 4 and put themÂ together and make a string. Now what if only one of them was a string the 3 was made aÂ string but the 4 is actually given as a number it does something called coercion which meansÂ that it converts both into the same type and in this case it converts both into a string. AndÂ when I run this I will get again 34 because what it has done is it has taken this 4 converted itÂ into a string and used the string form of plus to combine the two smaller strings togetherÂ looks good until we see what happens when we try doing star which is multiplication.Now star is not defined for strings. So, what does Javascript do it does not just complain and sayÂ you know I do not know how to do star on strings. It does the opposite conversion and convertsÂ both into numbers and you get 12 as the output. Now to me this is just a recipe for confusionÂ I mean there is like no particular reason for converting some of them to strings and some backÂ to numbers when you need to but that is a choice that the makers of Javascript made please avoidÂ using any of this sort in code that actually goes into production because it is just going toÂ confuse somebody and not really be helpful. Now after this of course comesÂ the question of how do we define equality because some kinds of comparisons areÂ always going to be needed. So, what happens if I just had something like console dot log 3 equalÂ to 4. I should get something that says false perfect and what happens about 3 equalÂ to 3 very good that gives us true. What about string three equal to number threeÂ once again Javascript starts doing coercion and it says it is true once again thisÂ is potentially a source of problems. Please be careful about this because you do notÂ automatically want to convert strings to numbers or vice versa you want that to be in your controlÂ you want to know exactly when such a conversion is taking place in which case it is probably betterÂ to resort to what's called strict equality which is the triple equals sign. What happens when IÂ run that it says 3 equal to 3 no it is not ok you can go further and you know you have thisÂ thing where there are two parameters undefined and null both of which essentially have aÂ so called none type of characteristic. But if you do a triple equals on them it isÂ going to say they are not equal to each other for the most part unless you have a veryÂ specific need triple equals is probably the safer one to use for comparisons. YouÂ should be able to use it in most cases unless there is a very specific instanceÂ where only the double equals has to be used and then please be aware of what possibleÂ pitfalls happen because of that. ",
        "duration_minutes": 45,
        "keywords": [
          "JavaScript",
          "web development",
          "programming language",
          "history",
          "syntax",
          "data types",
          "scope",
          "coercion",
          "DOM interaction"
        ]
      },
      {
        "lecture_id": 2,
        "week_id": 1,
        "order": 2,
        "title": "JavaScript Language Fundamentals",
        "resource_type": "pdf",
        "resource_url": "MAD 1.pdf",
        "content_extract": "Modern application development involves creating programs that allow users to interact with computing systems to perform useful tasks. These applications typically consist of a backend that stores data, handles processing logic, and manages relationships between data elements, and a frontend that provides user-facing views and abstracts machine interaction. This structure naturally follows a client-server or request-response architecture. Web-based applications are particularly popular due to the near-universal reach of web browsers, a low barrier to entry for basic implementations, and the flexibility to develop highly complex systems. In the web application development model, presentation is handled using HTML for semantic content and CSS for styling, while the logic is implemented using a backend, such as Python with Flask. This model typically follows the Model-View-Controller (MVC) architecture, which offers a balance between understandability and flexibility. Additionally, web systems often adhere to REST principles to manage stateful applications over inherently stateless HTTP protocols. APIs, which separate the data from the view, play a critical role in modern development, although not all APIs strictly follow RESTful design principles. Other crucial aspects of application development include ensuring security, validation, user authentication through logins and Role-Based Access Control (RBAC), and making strategic choices regarding databases and frontend frameworks. Advanced frontend development involves exploring JavaScript (JS) and its usage within the broader ecosystem of APIs and markup languages, sometimes referred to as the JAMStack. JavaScript is pivotal for modern frontend development due to its versatility and asynchronous capabilities. Frameworks such as VueJS are popular candidates for building responsive and interactive user interfaces. Other areas of interest in advanced web development include asynchronous messaging, handling email communications, building mobile and standalone applications like Progressive Web Apps (PWAs) or Single Page Applications (SPAs), performance measurement and optimization, and exploring alternatives to REST-based architectures. JavaScript, initially developed in 1995 as a lightweight scripting language for Netscape Navigator, was originally intended to act as 'glue' to bind modules from other languages. Although it was not designed for large-scale programming, its utility grew significantly with the advent of interactive web applications such as Google Maps and Google Suggest around 2005. These applications, which use techniques collectively known as Ajax (Asynchronous JavaScript and XML), enabled seamless, dynamic user experiences by loading only necessary content asynchronously. This approach marked the evolution of web applications toward behavior similar to desktop applications. As JavaScript usage expanded, the need for standardization became apparent. This led to the establishment of the ECMAScript standard by the European Computer Manufacturers Association (ECMA), avoiding trademark issues associated with the name 'JavaScript.' ECMAScript defines the language specification, while JavaScript represents its practical implementation in browsers. ECMAScript 6 (ES6), introduced in 2015, brought major enhancements like modules, block-scoped variables, and class syntax, which modernized the language and aligned it with other contemporary programming languages. JavaScript development faces the challenge of ensuring compatibility across different browser versions. To address this, developers may either disregard older browsers, package the browser with the application (e.g., Electron for VSCode), use polyfills to emulate newer features, or employ compilers like BabelJS to translate modern JavaScript into backward-compatible code. JavaScriptâ€™s origins prioritized ease of use over performance, leading to design choices like automatic error tolerance and ambiguous syntax. For example, automatic semicolon insertion and the dual interpretation of curly braces ({}) as either object literals or code blocks can lead to subtle bugs. Additionally, JavaScript operates with an event-driven, asynchronous model known as the event loop, which is a powerful mechanism for handling concurrent operations. JavaScript code is typically executed within a browser context through an HTML document that loads scripts using <script> tags. While the language was not originally designed for standalone execution, Node.js allows JavaScript to run on the command line, facilitating server-side development. A key feature of JavaScript is its ability to interact with the Document Object Model (DOM), which represents the structure of a web page. JavaScript can manipulate the DOM to respond to user inputs like clicks and keystrokes and update outputs such as text and styles in real-time. This capability is fundamental to building interactive web applications. For learning JavaScript, resources such as 'JavaScript for Impatient Programmers,' the Mozilla Developer Network (MDN), and interactive platforms like Learn JavaScript Online provide comprehensive guidance. Tools like BabelJS, JS Console, and Replit assist in writing and testing JavaScript code. JavaScript syntax encompasses program structure, comments, identifiers, statements, expressions, data types, and control flow mechanisms. Identifiers in JavaScript must avoid reserved keywords such as 'await,' 'class,' and 'function,' while literals represent constant values like 'true,' 'false,' and 'null.' Statements perform actions, whereas expressions evaluate to values. Data types in JavaScript include primitive types (undefined, null, boolean, number, string, bigint, and symbol) and objects. Functions, which are also first-class objects, play a central role in JavaScript by encapsulating reusable logic and can be manipulated like other objects. JavaScript supports several function notations: traditional function declarations, anonymous functions, and arrow functions. Arrow functions provide a concise syntax but differ from traditional functions in how they handle the 'this' keyword. Immediately Invoked Function Expressions (IIFEs) were once commonly used to create local scopes but are less necessary with modern scoping mechanisms. JavaScriptâ€™s type coercion system can lead to unexpected behavior, especially in comparisons. For instance, the loose equality operator (==) performs type conversion, while the strict equality operator (===) does not. Managing variable scope is crucial in JavaScript. The 'var' keyword, which has function-level scope, is now largely replaced by 'let' and 'const.' The 'let' keyword declares block-scoped variables that can be updated, while 'const' declares variables that cannot be reassigned. JavaScript supports various control flow constructs, including 'if' statements for conditionals, 'for' and 'while' loops for iteration, and 'switch' statements for multi-way branching. Functions in JavaScript can be declared using traditional syntax or as arrow functions. Functions can also be anonymous and immediately invoked for encapsulating temporary scopes. The ability to manipulate the DOM is one of JavaScriptâ€™s most powerful features. The DOM API allows developers to respond to user interactions like mouse clicks and text input and update the page content dynamically. While 'console.log()' provides basic debugging capabilities, more advanced debugging tools are available in browser developer consoles.",
        "duration_minutes": 90,
        "keywords": [
          "JavaScript syntax",
          "variables",
          "data types",
          "operators",
          "functions",
          "control flow",
          "DOM manipulation",
          "ECMAScript",
          "asynchronous programming"
        ]
      },
      {
        "lecture_id": 3,
        "week_id": 2,
        "order": 1,
        "title": "JavaScript Collections and Iteration",
        "resource_type": "youtube",
        "video_url": "https://www.youtube.com/watch?v=WUehmp1bwaY&t=1s",
        "content_transcript": "Hello everyone welcome to modernÂ  application development part 2. Now we are going to continue on our journeyÂ  through Javascript and in this set of videos we are going to be looking at some slightly moreÂ  advanced topics in the context of Javascript. So, we will start with collections. And what do I mean by Javascript collections the most basic form of a collectionÂ  is an array and what do we do with arrays we basically want to be able to look at the itemsÂ  one at a time right which is basically a cons called iteration which we will look at thereÂ  are also something. So, like multi-dimensional arrays that can be implemented and a fewÂ  other concepts that we need to look at. What I am going to do is first cover some ofÂ  these concepts at a slide level where I just sort of talk about them and then we will switchÂ  over and look at some examples using replit. So, the basic idea of an array is that it is aÂ  collection of objects right and the interesting thing about Javascript arrays unlike let us sayÂ  a C array is that the objects can be of any type. Now in C when I declare an array I usuallyÂ  declare it as an array of int or an array of short or an array of char or in some caseÂ  it could be that I have defined a string data type and therefore I could have an array ofÂ  strings right but in Javascript I can basically have a mixed set of values right.  So, in this sense it is very close to what a list in python is like lists in pythonÂ  are also mixed type right whereas a numeric python array has a very specific data type thatÂ  is applied to all the elements in the array. So, even though in Javascript these are called arraysÂ  they are closer to the lists in python and are more sort of generic collections. Now what are theÂ  things that we would want to do with arrays. We would need we want to be able toÂ  access any given element in the array we want to find the length of the arrayÂ  that is the number of elements in the array and over here there is also oneÂ  interesting thing which comes up in the context of Javascript which is not reallyÂ  there in other languages. So, much which is that you can create an array with holes in it.Â  What is that? We will get to that soon. And of course one of the most important thingsÂ  you want to do with an array is after all you have put a number of different items togetherÂ  into one collection presumably because they have something in common right otherwise I mean whyÂ  even bother to put them into the same array or collection. Which means that you might also wantÂ  to sort of iterate over them that is go over each one of those elements and do something right. Call a function or print them out or do something else but for doing that we need to be able toÂ  sort of iterate over all the elements in the array sequentially. So, all of these thingsÂ  are what we are going to look at. Now the idea of iteration or iteration rightÂ  both pronunciations uh seem to be common enough uh is to go over all the elements in a collectionÂ  right and there are a couple of concepts over here in the language of Javascript. TheyÂ  refer to something called an iterable or an iterable is an object whose contents canÂ  be accessed sequentially . So, you can think about this I mean if you after all in JavascriptÂ  in principle everything is an object right. So, you could just have an object whichÂ  is like a number one right and one is not really an object whose contents can beÂ  accessed sequentially there is only one piece of content over there right. So, thereÂ  is no sort of concept of sequential axis. And similarly if I just have a single characterÂ  a then same thing right you do not really have any concept of accessing the character afterÂ  there is only one of them sequentially. But pretty much anything else can be iterated overÂ  and what is it that does the iteration you need to have a pointer to where you are right now. And youÂ  need some way of sort of moving forward in that iteration right. And the iterator is basically theÂ  pointer to the next element and how we implement that iterator function will finally decideÂ  how iteration happens on a collection. Now the reason for having the sort of abstractÂ  description is that you are no longer just limited to very single for loops or while loopsÂ  you can also do something more complicated where you can create an object and make it iterableÂ  and define new kinds of functionality on it. Now the most basic iterable objects in JavascriptÂ  are of course arrays which we are looking at. But apart from that even a string right aÂ  Javascript string can be iterated over. Similarly there are a couple of other objects calledÂ  maps sets and there is also something called a weak map right which are slightly more advancedÂ  topics we are not really going to get into those. All of those can be iterated over meaningÂ  that there is some notion of multiple entities being present inside such an objectÂ  and you can go through those in sequence. And from the point of view of JavascriptÂ  and its application to the web the browser DOM which is basically some kind of a treeÂ  structure right the document object model itself can be iterated over. So, it is possible toÂ  sort of traverse the entire document object model right by saying next next next and goingÂ  through all the elements one by one. That becomes useful when you areÂ  basically going through the different processing of the DOM.  Now there are some helper functions that are defined in terms of objects right thingsÂ  like object dot keys, object dot entries and so on we will look at these a little bit laterÂ  when we get to the examples of code. Now in addition to this and this is somethingÂ  that we will be looking at more when we get to the examples we have functions that can takeÂ  functions as input. So, this whole idea of a function being passed as an argument to anotherÂ  function is a very powerful construct right it can be done even in a language like C youÂ  do have this concept of function pointers and how you can pass function pointers asÂ  inputs to other functions and so on. But in a language like C it is cumbersomeÂ  at best right I mean you have to sort of be very clear that this is a functionÂ  this is a pointer to a function and I am therefore sort of you know passingÂ  around pointers to the functions and so on. Whereas languages like python and JavascriptÂ  make it a lot easier they almost treat functions as sort of first class objects rightÂ  which means that a function can itself be treated as an object in some way.  Now where this really becomes powerful is that there are certain classes of functions this mapÂ  filter find and so on are some examples of those and effectively what they do is they applyÂ  something called a callback function right. So, there is an additional functionÂ  that is passed into let us say map right. And this idea of a callback right is aÂ  very important concept it basically says there is a function which is parsed into anotherÂ  function and depending on something that happens internally in the top level function. The function that was passed in as an argument would be called back. Now why is that useful thereÂ  are a number of different types of functionality that can be realized in this way right. And allÂ  of these are sort of related to some concepts of what's called functional programming rightÂ  it allows us to sort of create chains of transformations and also pass functions aroundÂ  and have different kinds of behaviour depending on different scenarios that are present.  But we will not be getting into any details on functional programming why it is useful orÂ  how it is done what is useful to know is that Javascript sort of allows you to do some ofÂ  those things and more than anything else it makes the syntax relatively easy right.Â  Remember like I said even in C you can do this kind of you know call backs right exceptÂ  that it is somewhat cumbersome to do. Whereas in Javascript or python it becomes aÂ  lot easier because the language syntax allows it in a more sort of fluid manner and that isÂ  primarily what we are looking for over here. There are some other collections inÂ  Javascript in particular there is a concept of a map right which is essentiallyÂ  the equivalent of a python dictionary but as we will see you can actually even just use regularÂ  Javascript objects almost like dictionaries. So, do you really need a map what are the benefits ofÂ  using maps. We will not be getting into too many details on those in fact there is something elseÂ  called a weak map and the set and the weak set all of those are things that were broughtÂ  into Javascript relatively recently. With the aim of sort of you know making certainÂ  kinds of coding more well structured right. Now by now you have probably understood that youÂ  know Javascript the real power lies in the fact that it had a very simple sort of definitionÂ  to start with right it was very flexible which meant that even structures that didÂ  not exist in the language. So, for example proper block level scoping right orÂ  classes even though they did not exist in the language to start with peopleÂ  were able to sort of hack around it. And come up with ways of implementing properÂ  scoping using IIFEs right immediately invoked function expressions or they could uh forÂ  example have object orientation using some notion of something called prototypes right.Â  The point is those are somewhat difficult to use and more importantly they are difficultÂ  to read and understand. So, a lot of these newer changes including the introduction ofÂ  data types like maps and so on has been done with the aim of making Javascript a littleÂ  easier to read and understand for others. You could have a lot of the core functionalityÂ  without requiring these things as well. So, in our case what we are goingÂ  to do is we will only be looking at some of these things as in when needed weÂ  are not going to be sort of getting deep into them and trying to understandÂ  how these work straight away. Now one last thing with regard to collections isÂ  that there is one interesting idea that can be used over here which is called destructuring. Once again this is just part of the language syntax it is not a sort of new concept in theÂ  language as such what it provides is a simple syntax that allows us to split an array intoÂ  multiple values. And there are a number of uses that have been found for this in JavascriptÂ  right including the ability to sort of pass the so-called function arguments can be passedÂ  by name rather than passed by position. You can have a concept of basically using namedÂ  arguments which is there in python of course but which is not really there in C by default. So,Â  that can be powerful in a lot of cases it allows you to sort of set default argument values andÂ  various other things and Javascript even though it does not have it as part of the syntax is ableÂ  to achieve the same kind of functionality using some very simple syntactic constructs. So, we willÂ  briefly look at that as well at some point. Now finally there is this notion of somethingÂ  called a generator right and a generator and this is a slightly advanced topic. So, weÂ  are not really going to get too deep into this. Having said that the reason I am introducing itÂ  over here is because especially for those of you who are interested in learning more aboutÂ  Javascript and understanding in particular some concepts like concurrent execution. The idea of a generator is important to know and a generator is basically a function thatÂ  yields values. So, what this keyword yield is in fact used inside the generator andÂ  the idea behind that yield is to say that whenever it is sort of the equivalent of aÂ  return statement except that it is not exiting the function completely. It is just saying that atÂ  this point in time the function is giving a value and saving its present state and waiting to beÂ  restarted from the point where it left off. Why is this useful it basically allows us toÂ  think in terms of functions that are sort of cooperating with each other right one functionÂ  yields a value to another one the other one does something with it exits and we go back to theÂ  original function and continue from where we left off right. So, in principle both the functionsÂ  are active and functioning at the same time right that is a notion called concurrency whichÂ  is very powerful and is sort of the basis of parallelism concurrency does not mean the same asÂ  parallelism but is in some sense required if you want to be able to implement parallelism.  So, generators are functions that sort of take you in that direction right they allow you toÂ  sort of yield values and have multiple functions operational at the same time it setsÂ  up the sales stage for what's called cooperative concurrency right. And there are aÂ  number of uh sort of advanced topics over here computer iterables dynamically generated iteratorsÂ  and so on which we are not going to get into any details at this point all right.  So, now that we have looked at some of the as we can say theory behind collections itÂ  is not exactly theory it is sort of just a moral description of a few of the conceptsÂ  that we can look at. Let us look at code right because ultimately in order to learn aÂ  language the best way is to actually look at the code and understand what it is doing.Â  So, once again you know I am going back to the replit example that I had I have this indexÂ  dot html right which is a very basic code. All that it does is pretty muchÂ  just puts hello world on the screen. In the previous uh videos we had seen you know howÂ  the div s could be declared and we could actually sort of insert data into it right modify it andÂ  so on. And essentially showing how the Javascript API s can interact with the DOM. Now I am notÂ  going to be using a lot of that right. Now what I do have is there are a bunch of scripts but mostÂ  of them are commented out there is only one that is active currently which is collections.  So, let us go see what is in collections. Now this first part is in some sense the most basic form of declaring an array right whatÂ  we have is let x equals 1, 2, 3 and what we can see over here is I am going to basically logÂ  something saying dollar remember this back tick method that we use right which basicallyÂ  is sort of a templating string right. So, once I have that back tick back tick overÂ  here inside that dollar and the curly brackets anything inside of that willÂ  actually get evaluated. So, dollar type of x should actually run the typeÂ  of function on x which in this case is array right and print something out the actual array itselfÂ  and also tell you what the length of the array is. And the second statement console dot log x of 0Â  should pick out the first element because these are again like python zero indexed. So, whatÂ  happens when I run this I find that the first thing it says is that this is an object.  So, keep in mind I mean even though I have declared it using these square brackets inÂ  this way as far as Javascript is concerned this is an object it does not really think of itÂ  as a array data type it is ultimately an object that is pretty much what it is there are otherÂ  ways of sort of finding out whether it is an instance of an array and so on. But for the timeÂ  being we are not really getting into that. All right let us go a bit furtherÂ  and what happens if I let say have another array that I declare but now look at thisÂ  second array y right I have got one over here the second element is b and the third elementÂ  is actually well take a moment and think about it right what is this actually doing remember theÂ  arrow notation right what it is saying is it takes an input a and converts it right into a + 1.  So, replit has this nice behaviour where when you hover over a particular syntactic constructÂ  in the code it actually shows the small tooltip right hanging above this that part and clearlyÂ  it shows that this is basically a function right. And what kind of a function is it itÂ  takes a as input where a is of any type right it is not necessarily an integer it couldÂ  be anything and it returns any type. Now why why is that being written over hereÂ  because we are not specified the type of a Javascript by itself does not have a way by whichÂ  it specifies types unlike C for example right. Now there is a variant of Javascript notÂ  exactly a variant it is actually almost a language of its own called typescript where youÂ  actually have to explicitly specify types right. And that leads to a lot of very usefulÂ  optimizations that the compiler can do which lead to sort of betterÂ  functioning Javascript. And in general you know better debuggingÂ  capabilities at least right in some cases even performance optimizations can be performed thatÂ  could not have been done in pure Javascript but basic Javascript does not have that notionÂ  of types. So, this notation here function a colon any colon any is more a sort ofÂ  shorthand that people understand rather than being part of Javascript itself all right.  So, you know long story short let us run it with y over here right and what we find is that theÂ  second one once again comes out to be an object right y is also an object the contents of y are 1,Â  b, a and a + 1 right and with length equal to 3. Now this we could go one step further overÂ  here right and yeah in fact we will get to that later. So, you know for the timeÂ  being let us just leave this as right. The important point over here was that I couldÂ  have an object with mixed data types I could have a number I could have a character and I could haveÂ  a function all of them as being part of the same array right. And the length of both x as well as yÂ  are essentially the same they were determined just by the fact that the number of elements in eachÂ  over there. Now I can do one thing further which is basically to say that I can essentially nullÂ  out an entire collection or an array right. What happens when I do that I find that x has nowÂ  become it continues to be an object but now its length is equal to zero. So, just setting it toÂ  null like this effectively deleted everything that was there inside x. Now this next stage here is aÂ  little bit more interesting right what I am going to do is y dot length equal to 10. Now normallyÂ  in python for example the length of a function is not something that you can change a length of anÂ  array or a list is not something that you directly change right it is a computed parameterÂ  but in Javascript it looks like you can actually assign directly to the length.  So, what happens when I do this I find that now right maybe it is easier if weÂ  comment out all the other console lines and run this what we find is that y has. NowÂ  become an object with length equal to 10 and if you look at it look at what it is printedÂ  out it first the first element was one then the character b then the function a to a +Â  1 and then just commas one after the other right with nothing in them right.  So, basically saying in other words that yes there are there is data there but none of itÂ  basically has any value. They are all undefined or null what exactly is it that depends on how youÂ  iterate through it and what you are trying to get the value out of it. Basically ifÂ  you try directly accessing let us say y of 4 you will find that it is undefinedÂ  because it is not being initialized. Hello everyone welcome to modernÂ  application development part 2. Now we are going to continue on our journeyÂ  through Javascript and in this set of videos we are going to be looking at some slightly moreÂ  advanced topics in the context of Javascript. So, we will start with collections. And what do I mean by Javascript collections the most basic form of a collectionÂ  is an array and what do we do with arrays we basically want to be able to look at the itemsÂ  one at a time right which is basically a cons called iteration which we will look at thereÂ  are also something. So, like multi-dimensional arrays that can be implemented and a fewÂ  other concepts that we need to look at. What I am going to do is first cover some ofÂ  these concepts at a slide level where I just sort of talk about them and then we will switchÂ  over and look at some examples using replit. So, the basic idea of an array is that it is aÂ  collection of objects right and the interesting thing about Javascript arrays unlike let us sayÂ  a C array is that the objects can be of any type. Now in C when I declare an array I usuallyÂ  declare it as an array of int or an array of short or an array of char or in some caseÂ  it could be that I have defined a string data type and therefore I could have an array ofÂ  strings right but in Javascript I can basically have a mixed set of values right.  So, in this sense it is very close to what a list in python is like lists in pythonÂ  are also mixed type right whereas a numeric python array has a very specific data type thatÂ  is applied to all the elements in the array. So, even though in Javascript these are called arraysÂ  they are closer to the lists in python and are more sort of generic collections. Now what are theÂ  things that we would want to do with arrays. We would need we want to be able toÂ  access any given element in the array we want to find the length of the arrayÂ  that is the number of elements in the array and over here there is also oneÂ  interesting thing which comes up in the context of Javascript which is not reallyÂ  there in other languages. So, much which is that you can create an array with holes in it.Â  What is that? We will get to that soon. And of course one of the most important thingsÂ  you want to do with an array is after all you have put a number of different items togetherÂ  into one collection presumably because they have something in common right otherwise I mean whyÂ  even bother to put them into the same array or collection. Which means that you might also wantÂ  to sort of iterate over them that is go over each one of those elements and do something right. Call a function or print them out or do something else but for doing that we need to be able toÂ  sort of iterate over all the elements in the array sequentially. So, all of these thingsÂ  are what we are going to look at. Now the idea of iteration or iteration rightÂ  both pronunciations uh seem to be common enough uh is to go over all the elements in a collectionÂ  right and there are a couple of concepts over here in the language of Javascript. TheyÂ  refer to something called an iterable or an iterable is an object whose contents canÂ  be accessed sequentially . So, you can think about this I mean if you after all in JavascriptÂ  in principle everything is an object right. So, you could just have an object whichÂ  is like a number one right and one is not really an object whose contents can beÂ  accessed sequentially there is only one piece of content over there right. So, thereÂ  is no sort of concept of sequential axis. And similarly if I just have a single characterÂ  a then same thing right you do not really have any concept of accessing the character afterÂ  there is only one of them sequentially. But pretty much anything else can be iterated overÂ  and what is it that does the iteration you need to have a pointer to where you are right now. And youÂ  need some way of sort of moving forward in that iteration right. And the iterator is basically theÂ  pointer to the next element and how we implement that iterator function will finally decideÂ  how iteration happens on a collection. Now the reason for having the sort of abstractÂ  description is that you are no longer just limited to very single for loops or while loopsÂ  you can also do something more complicated where you can create an object and make it iterableÂ  and define new kinds of functionality on it. Now the most basic iterable objects in JavascriptÂ  are of course arrays which we are looking at. But apart from that even a string right aÂ  Javascript string can be iterated over. Similarly there are a couple of other objects calledÂ  maps sets and there is also something called a weak map right which are slightly more advancedÂ  topics we are not really going to get into those. All of those can be iterated over meaningÂ  that there is some notion of multiple entities being present inside such an objectÂ  and you can go through those in sequence. And from the point of view of JavascriptÂ  and its application to the web the browser DOM which is basically some kind of a treeÂ  structure right the document object model itself can be iterated over. So, it is possible toÂ  sort of traverse the entire document object model right by saying next next next and goingÂ  through all the elements one by one. That becomes useful when you areÂ  basically going through the different processing of the DOM.  Now there are some helper functions that are defined in terms of objects right thingsÂ  like object dot keys, object dot entries and so on we will look at these a little bit laterÂ  when we get to the examples of code. Now in addition to this and this is somethingÂ  that we will be looking at more when we get to the examples we have functions that can takeÂ  functions as input. So, this whole idea of a function being passed as an argument to anotherÂ  function is a very powerful construct right it can be done even in a language like C youÂ  do have this concept of function pointers and how you can pass function pointers asÂ  inputs to other functions and so on. But in a language like C it is cumbersomeÂ  at best right I mean you have to sort of be very clear that this is a functionÂ  this is a pointer to a function and I am therefore sort of you know passingÂ  around pointers to the functions and so on. Whereas languages like python and JavascriptÂ  make it a lot easier they almost treat functions as sort of first class objects rightÂ  which means that a function can itself be treated as an object in some way.  Now where this really becomes powerful is that there are certain classes of functions this mapÂ  filter find and so on are some examples of those and effectively what they do is they applyÂ  something called a callback function right. So, there is an additional functionÂ  that is passed into let us say map right. And this idea of a callback right is aÂ  very important concept it basically says there is a function which is parsed into anotherÂ  function and depending on something that happens internally in the top level function. The function that was passed in as an argument would be called back. Now why is that useful thereÂ  are a number of different types of functionality that can be realized in this way right. And allÂ  of these are sort of related to some concepts of what's called functional programming rightÂ  it allows us to sort of create chains of transformations and also pass functions aroundÂ  and have different kinds of behaviour depending on different scenarios that are present.  But we will not be getting into any details on functional programming why it is useful orÂ  how it is done what is useful to know is that Javascript sort of allows you to do some ofÂ  those things and more than anything else it makes the syntax relatively easy right.Â  Remember like I said even in C you can do this kind of you know call backs right exceptÂ  that it is somewhat cumbersome to do. Whereas in Javascript or python it becomes aÂ  lot easier because the language syntax allows it in a more sort of fluid manner and that isÂ  primarily what we are looking for over here. There are some other collections inÂ  Javascript in particular there is a concept of a map right which is essentiallyÂ  the equivalent of a python dictionary but as we will see you can actually even just use regularÂ  Javascript objects almost like dictionaries. So, do you really need a map what are the benefits ofÂ  using maps. We will not be getting into too many details on those in fact there is something elseÂ  called a weak map and the set and the weak set all of those are things that were broughtÂ  into Javascript relatively recently. With the aim of sort of you know making certainÂ  kinds of coding more well structured right. Now by now you have probably understood that youÂ  know Javascript the real power lies in the fact that it had a very simple sort of definitionÂ  to start with right it was very flexible which meant that even structures that didÂ  not exist in the language. So, for example proper block level scoping right orÂ  classes even though they did not exist in the language to start with peopleÂ  were able to sort of hack around it. And come up with ways of implementing properÂ  scoping using IIFEs right immediately invoked function expressions or they could uh forÂ  example have object orientation using some notion of something called prototypes right.Â  The point is those are somewhat difficult to use and more importantly they are difficultÂ  to read and understand. So, a lot of these newer changes including the introduction ofÂ  data types like maps and so on has been done with the aim of making Javascript a littleÂ  easier to read and understand for others. You could have a lot of the core functionalityÂ  without requiring these things as well. So, in our case what we are goingÂ  to do is we will only be looking at some of these things as in when needed weÂ  are not going to be sort of getting deep into them and trying to understandÂ  how these work straight away. Now one last thing with regard to collections isÂ  that there is one interesting idea that can be used over here which is called destructuring. Once again this is just part of the language syntax it is not a sort of new concept in theÂ  language as such what it provides is a simple syntax that allows us to split an array intoÂ  multiple values. And there are a number of uses that have been found for this in JavascriptÂ  right including the ability to sort of pass the so-called function arguments can be passedÂ  by name rather than passed by position. You can have a concept of basically using namedÂ  arguments which is there in python of course but which is not really there in C by default. So,Â  that can be powerful in a lot of cases it allows you to sort of set default argument values andÂ  various other things and Javascript even though it does not have it as part of the syntax is ableÂ  to achieve the same kind of functionality using some very simple syntactic constructs. So, we willÂ  briefly look at that as well at some point. Now finally there is this notion of somethingÂ  called a generator right and a generator and this is a slightly advanced topic. So, weÂ  are not really going to get too deep into this. Having said that the reason I am introducing itÂ  over here is because especially for those of you who are interested in learning more aboutÂ  Javascript and understanding in particular some concepts like concurrent execution. The idea of a generator is important to know and a generator is basically a function thatÂ  yields values. So, what this keyword yield is in fact used inside the generator andÂ  the idea behind that yield is to say that whenever it is sort of the equivalent of aÂ  return statement except that it is not exiting the function completely. It is just saying that atÂ  this point in time the function is giving a value and saving its present state and waiting to beÂ  restarted from the point where it left off. Why is this useful it basically allows us toÂ  think in terms of functions that are sort of cooperating with each other right one functionÂ  yields a value to another one the other one does something with it exits and we go back to theÂ  original function and continue from where we left off right. So, in principle both the functionsÂ  are active and functioning at the same time right that is a notion called concurrency whichÂ  is very powerful and is sort of the basis of parallelism concurrency does not mean the same asÂ  parallelism but is in some sense required if you want to be able to implement parallelism.  So, generators are functions that sort of take you in that direction right they allow you toÂ  sort of yield values and have multiple functions operational at the same time it setsÂ  up the sales stage for what's called cooperative concurrency right. And there are aÂ  number of uh sort of advanced topics over here computer iterables dynamically generated iteratorsÂ  and so on which we are not going to get into any details at this point all right.  So, now that we have looked at some of the as we can say theory behind collections itÂ  is not exactly theory it is sort of just a moral description of a few of the conceptsÂ  that we can look at. Let us look at code right because ultimately in order to learn aÂ  language the best way is to actually look at the code and understand what it is doing.Â  So, once again you know I am going back to the replit example that I had I have this indexÂ  dot html right which is a very basic code. All that it does is pretty muchÂ  just puts hello world on the screen. In the previous uh videos we had seen you know howÂ  the div s could be declared and we could actually sort of insert data into it right modify it andÂ  so on. And essentially showing how the Javascript API s can interact with the DOM. Now I am notÂ  going to be using a lot of that right. Now what I do have is there are a bunch of scripts but mostÂ  of them are commented out there is only one that is active currently which is collections.  So, let us go see what is in collections. Now this first part is in some sense the most basic form of declaring an array right whatÂ  we have is let x equals 1, 2, 3 and what we can see over here is I am going to basically logÂ  something saying dollar remember this back tick method that we use right which basicallyÂ  is sort of a templating string right. So, once I have that back tick back tick overÂ  here inside that dollar and the curly brackets anything inside of that willÂ  actually get evaluated. So, dollar type of x should actually run the typeÂ  of function on x which in this case is array right and print something out the actual array itselfÂ  and also tell you what the length of the array is. And the second statement console dot log x of 0Â  should pick out the first element because these are again like python zero indexed. So, whatÂ  happens when I run this I find that the first thing it says is that this is an object.  So, keep in mind I mean even though I have declared it using these square brackets inÂ  this way as far as Javascript is concerned this is an object it does not really think of itÂ  as a array data type it is ultimately an object that is pretty much what it is there are otherÂ  ways of sort of finding out whether it is an instance of an array and so on. But for the timeÂ  being we are not really getting into that. All right let us go a bit furtherÂ  and what happens if I let say have another array that I declare but now look at thisÂ  second array y right I have got one over here the second element is b and the third elementÂ  is actually well take a moment and think about it right what is this actually doing remember theÂ  arrow notation right what it is saying is it takes an input a and converts it right into a + 1.  So, replit has this nice behaviour where when you hover over a particular syntactic constructÂ  in the code it actually shows the small tooltip right hanging above this that part and clearlyÂ  it shows that this is basically a function right. And what kind of a function is it itÂ  takes a as input where a is of any type right it is not necessarily an integer it couldÂ  be anything and it returns any type. Now why why is that being written over hereÂ  because we are not specified the type of a Javascript by itself does not have a way by whichÂ  it specifies types unlike C for example right. Now there is a variant of Javascript notÂ  exactly a variant it is actually almost a language of its own called typescript where youÂ  actually have to explicitly specify types right. And that leads to a lot of very usefulÂ  optimizations that the compiler can do which lead to sort of betterÂ  functioning Javascript. And in general you know better debuggingÂ  capabilities at least right in some cases even performance optimizations can be performed thatÂ  could not have been done in pure Javascript but basic Javascript does not have that notionÂ  of types. So, this notation here function a colon any colon any is more a sort ofÂ  shorthand that people understand rather than being part of Javascript itself all right.  So, you know long story short let us run it with y over here right and what we find is that theÂ  second one once again comes out to be an object right y is also an object the contents of y are 1,Â  b, a and a + 1 right and with length equal to 3. Now this we could go one step further overÂ  here right and yeah in fact we will get to that later. So, you know for the timeÂ  being let us just leave this as right. The important point over here was that I couldÂ  have an object with mixed data types I could have a number I could have a character and I could haveÂ  a function all of them as being part of the same array right. And the length of both x as well as yÂ  are essentially the same they were determined just by the fact that the number of elements in eachÂ  over there. Now I can do one thing further which is basically to say that I can essentially nullÂ  out an entire collection or an array right. What happens when I do that I find that x has nowÂ  become it continues to be an object but now its length is equal to zero. So, just setting it toÂ  null like this effectively deleted everything that was there inside x. Now this next stage here is aÂ  little bit more interesting right what I am going to do is y dot length equal to 10. Now normallyÂ  in python for example the length of a function is not something that you can change a length of anÂ  array or a list is not something that you directly change right it is a computed parameterÂ  but in Javascript it looks like you can actually assign directly to the length.  So, what happens when I do this I find that now right maybe it is easier if weÂ  comment out all the other console lines and run this what we find is that y has. NowÂ  become an object with length equal to 10 and if you look at it look at what it is printedÂ  out it first the first element was one then the character b then the function a to a +Â  1 and then just commas one after the other right with nothing in them right.  So, basically saying in other words that yes there are there is data there but none of itÂ  basically has any value. They are all undefined or null what exactly is it that depends on how youÂ  iterate through it and what you are trying to get the value out of it. Basically ifÂ  you try directly accessing let us say y of 4 you will find that it is undefinedÂ  because it is not being initialized.  Hello everyone welcome to modernÂ  application development part two. And look at this new concept called iteration.Â  Now what I am going to do over here is I once again declared now x in this case is thisÂ  mixed array and I am saying x dot length equal to 5. So, pretty much what we had earlier I amÂ  just calling it x instead of y but now I am writing a for loop and let us look at the forÂ  loop it is precisely how a for loop in C. For example would look except that I am youÂ  know just directly using a let statement here in order to initialize the index variableÂ  i. Now this could this have been a const no because I actually need to modify the value ofÂ  i as part of the loop which is why for a for loop where I am actually incrementing the indexÂ  variable like this i need it to be left. But there are other for loopsÂ  where I can actually use const. If I am for example just using a off or inÂ  iteration we will look at again examples of those later. The bottom line is what I amÂ  doing over here is fairly straightforward I am just going from 0 to x dot length i + + and IÂ  am printing out that you know this was x of i and I am printing the type of x of iÂ  what does it look like when I run this the first value x of 0 essentially isÂ  the value is 1 and what is the type number see this was generated by theÂ  Javascript interpreter when it ran. As far as b is concerned it thinks it is of typeÂ  string as far as a to a + 1 is concerned it thinks it is of type function and the last two valuesÂ  which were created simply because I made x dot length equal to 5 artificially are undefined. TheÂ  value is undefined the type is undefined. So, both of these I mean essentially it comes out you knowÂ  saying this is the value. The value is undefined the type is undefined whereas for everything elseÂ  it is either a number or a string or a function it could also have been an object. Meaning it could have been an array itself. Now there are a couple of other ways of runningÂ  the same iteration one of them is using the keyword in. Now notice over here I can run constÂ  i in x. So, what does i in x mean? This basically means that let me comment out this other forÂ  loop because otherwise we have too much text on the screen yeah. So, when we do this const i inÂ  x I am doing exactly the same thing and I run it you will notice a couple of things one isÂ  even though x dot length is equal to five it basically did not look atÂ  elements three and four. So, it went only for the 0, 1 and 2 and it I haveÂ  to in order to get the value I actually need to do x of i in other words this i is actually theÂ  index into the array that is being iterated over. So, what happened over here the difference betweenÂ  a for with an explicit index computation and for with i in x is the fact that when you do i in xÂ  it goes over the index values but it skips and defines and I can actually declare this as a constÂ  because the incrementing of I is being done. It is not really doing it as an incrementÂ  of its actually going through and finding the next value it is basically calling theÂ  iterator function internally that is what is happening which means that every time I go insideÂ  these curly brackets i has got a new block scope which is why I am able to declare it as a const IÂ  never have to change its value inside the scope. And finally there is one more way ofÂ  iterating where I do const i off. And what what is the difference over here look atÂ  the code a little carefully I had const i in x and I was printing out x of i whereas when I do constÂ  i of x I just print out i and I look at type of i through x in this case it is not skippingÂ  the undefined. So I actually need to yeah what happens with const i of x is that theÂ  i of x means that it is taking the values of x not the i in x which means it is taking theÂ  index values which are present in x. So, const i of x actually takes the direct valueÂ  itself and therefore I can use I itself as the value in whatever I amÂ  printing or actually computing and I can then print it out it then says 1, b,Â  a each are of number string and function type and then it continues to go over the remainingÂ  values in x and says that they are undefined. So, all of these are the basic these areÂ  the most basic forms of iteration. But there is of course you know a little bitÂ  more to it in particular we can start looking at something like this which is we couldÂ  have something where I define x as an object notice the curly brackets. So, because of theÂ  curly brackets and the fact that I am giving a colon 1 b colon alpha c colon 3 2 1 and so onÂ  x is basically an object it is not directly an array and what are the index values in x it isÂ  these keys a b and c it is not 0, 1 and 2. Now when I do for const i in x I can actuallyÂ  do console dot log x of i and once again it basically goes through and basically prints out IÂ  alpha and this entire array 3, 2, 1. Now I could also just print out I in this case and what IÂ  would see then is I should see the index values and what are the index values as expected thatÂ  a b and c. Now instead if I use the off iterator I can do that as well . And what do I expect to see it should take ahÂ  yeah. So, what happens in this case is that the const iterator actually fails. Now why isÂ  the const iterator failing look at the error message that has come out over here it says thatÂ  x is not iterable. So, x was defined as an object when I use the const i in x it was able to iterateÂ  over it. So, it looks as though x is a iterable why is it saying x is not iterable.  Now what is actually happening over here is when I use the for i in x it is notÂ  actually iterating over x directly it is of iterating over another sort of parameterÂ  of x which is basically the x dot keys. So, there is a function whichÂ  will extract the key values in x that is iterable and therefore I can run constÂ  i in x and it will iterate over the keys in x. Const i of x on the other hand is supposedÂ  to iterate directly over the values of x. And for that it says it is not a troubleÂ  because it does not have a concept of 0 1 2 indexing it does not know directly how to findÂ  out the values corresponding to those slightly subtle point over here but you know bottom lineÂ  is it is probably better to avoid these kind of scenarios in any case. Whenever you are writingÂ  a for loop the more explicit you can make it what exactly are you iterating overÂ  what are the keys what are the values it is easier to understand andÂ  maintain in the long run. Now you can use off if you go with anÂ  other way of writing the code where we call explicitly a function called object dot entries.Â  So, this object over here is actually a class it is a the sort of primitive data typeÂ  present inside Javascript from which all other data types are derived and thatÂ  has a function associated with it a method called entries which will basically generateÂ  an iterable list of all the keys and values that are present inside the object.  So, what you are doing is we are taking this k, v two values. So, effectively everythingÂ  that is there in this object dot entries it is like a tuple in python it hasÂ  two values the key and the value and that key, value is assigned first to the firstÂ  entry in ah object dot entries of x then to the next one then to the next one and here I am onlyÂ  going to log the v that is the value itself. What happens when I run it as expected it givesÂ  me back the values I could add the key as well and then it would print both. So, it wouldÂ  basically tell me that a 1 b alpha and c 3 2 1. So, in other words it is printing both theÂ  key as well as the value that comes out of it. So, what is the takeaway over here are objects iterable not directly there areÂ  certain methods that can be called such as object dot entries which is sort of effectivelyÂ  implicitly called when I do const i in x. So, it is safe to use that but if I try doingÂ  const i of x I basically hit the error saying that an object by itself is notÂ  iterable. So, let us move forward. Now here is something else that we can do weÂ  can also use a new syntax over here where we basically say x is new array of five. So, this isÂ  new in a couple of different ways we are using a new keyword right literally the new keywordÂ  which is trying to create a new object. And what is this object notice over here thisÂ  this array is something that I had not really used before I mean previously we just use squareÂ  brackets in order to put the data into the array. Now when I declare array of five like thisÂ  I am effectively creating a new object with five elements in it and assigning that to x. NowÂ  what this has done is that it has created a new object but there is no value in those objects.  So, in other words everything inside the object is undefined but I can go around assigning values toÂ  it I can say x of 1 is equal to 10 x of 3 is equal to hello and then I can go through and print outÂ  the values I can print the index the value and the type of the value what happens when I run thisÂ  I find that at index 0 the value is undefined at index 1 which is where I put inÂ  x of 1 is equal to 10 I find that the value is 10 and it is of type number. Automatically the moment I assign the value 10 it updates the type also and says. Now it is aÂ  number index 2 still has nothing it is undefined index 3. Now has hello which is of type stringÂ  and index four is once again undefined. So, effectively what we have done over here is we justÂ  created an empty array. So, it was full of holes and just inserted values at some random placesÂ  at some in a couple of different places inside it leaving the others empty.  So, they continue to remain as holes and remember what we said about the in operatorÂ  effectively you know how how this works? Let us look at the result let meÂ  comment out this other part for clarity and when we run this we find that the inÂ  operator actually iterates only over the defined values the sort of the values that areÂ  where the the indices inside the array where the value is not undefined.  So, in other words only the ones where there is a clearly defined object in place it willÂ  take only 1 and 3 and print those values at all. Now there is one thing over here which isÂ  relatively simple to describe we are just declaring two arrays x is 1 2 3 and y is declaredÂ  as 0 and this notation out here with the triple dots dot dot dot x what does dot dot dot x doÂ  it is basically called a spreading operator and what a spreading operator does is it takesÂ  whatever x is and spreads it out internally. So, that you get the complete effectively itÂ  becomes a larger array with you know all the values directly spread out inside it. So, if IÂ  had not got the dot dot dot and if I had it this way what would the result have been I would seeÂ  that inside I actually retain the square brackets. So, that the second element of y becomes anÂ  array and at this point the length of y would be actually three because it would have the firstÂ  element as 0 the second element as the array 1 2 3 and the third element as 4. But by doing the spreading just putting in the dot dot dot over here andÂ  running it what I find is that. Now y has length 5 you can print that out and check it but y hasÂ  length of 5 and it has element 0 1 2 3 and 4. This becomes useful like I said in a couple of otherÂ  places it is just an interesting piece of syntax. Now there are some interesting like I said youÂ  know the functions that operate on functions. I am just starting by declaring a value an arrayÂ  x and then I am going to declare another array y and say x dot find and what is this insideÂ  the parenthesis over here it is a function. This is basically a function that takesÂ  uh this entire x value whatever it is and identifies where x is less than zero. Now theÂ  interesting thing is probably I have confused things a little bit by using the same x overÂ  here and over here they are unrelated. So, I could actually change this and make it letÂ  us say t and make it t less than 0 because all I am doing is basically declaring a function whatÂ  do you think is likely to come out of this when I log y I should find those elements in x where theÂ  value is less than zero and in fact well it is not exactly doing that it is finding the first elementÂ  in x where the value is less than zero. So, find in other words scansÂ  through the array from left to right and the moment it finds some value which satisfiesÂ  this function which has been given to it, it prints that value or it returns that value in thisÂ  case it got printed because I printed y that is all. Now this is useful if I want to findÂ  out for example whether a particular string contains the letter e. So, I can do xÂ  dot find of e and yes it should find out whether or not the string is there. Of course in strings there are probably some slightly more optimized functions that can be usedÂ  but something similar in the context of an array. Now what if I change thisÂ  around a little bit let me take out y and instead useÂ  another function called filter. Now notice that you know like I said ok I use theÂ  t over here but even if I use x over here this x is within the function scope which means thatÂ  this x that I have inside the parenthesis versus this x to which I am applying the filter areÂ  different values are different parameters. So, please keep that in mind when you areÂ  reading code ideally it is probably better to avoid writing code like this where you have theÂ  same name both inside the parameter and outside because it can lead to confusion are you using theÂ  same x. The interpreter itself is not going to be confused it has very clear scoping rules whichÂ  tell it that this x is different from this x. So, it should not have a problem but yeah youÂ  know maybe this should have been renamed to something else ok all anyway what happens when weÂ  run this filter is sort of like find except that it applies across the whole array.  So, what would it do it would find out all the negative values. So, -2 -4 and -7 getÂ  logged as a result of applying the filter. Now there are other more interesting sortÂ  of function of functions that we have map is another one what map does is itÂ  takes in this function that we have declared applies it to each one of them. So, filterÂ  what did it do it applied the function and it gave you only the ones for whichÂ  that function gave the result true. So, in other words it helped you to pull out aÂ  few of the values that were present inside the function map is something a bit more interestingÂ  over here in some sense because what it does is it actually allows you to modify the return values.Â  In this case what I am doing is I am checking the value is it greater than 0 if. So, I return theÂ  string + else I return the string - what happens when I run it I get + - + - + + - + dependingÂ  on whether the values of those corresponding positions were positive or negative.  So, the map has taken each of these values one and converted it to + -2 and convertedÂ  it to -3 and converted it to + and so on. And continuing on this we now come toÂ  something called the reduce function. What does reduce do reduce is something evenÂ  more advanced than this it actually takes a callback function as well as anÂ  initial value. And what it does is in this this initial value is first taken asÂ  the value of a over here the accumulator value it is called an accumulation.  So, reduce is basically going to take this callback function that I have provided overÂ  here and repeatedly apply it over x because I mean after all I am doing x dot reduce. So, thisÂ  function a, i giving a + i basically it takes two parameters a and i and returns a + i whatÂ  are those 2 parameters a is coming from within reduce itself it is initialized as 0 and then itÂ  keeps on coming from application of reduce. Whereas i is coming from the array on whichÂ  the reduce is being implemented. So, what is this going to do it will first take the value 0Â  it will take the first value from x which is 1 and it will do 0 + 1 and the value that will beÂ  returned will be 1. Now the value of a is going to be equal to 1 on the next round through this.Â  So, it will take a is equal to 1 i is equal to in this case -2 and do 1 - 2 and the resultÂ  will be -1. So, now a becomes equal to -1. Then -1 + 3 will become + 2 a becomes equalÂ  to + 2, 2 -4 will become -2 a becomes -2, -2 + 5 becomes equal to + 3. So, a becomesÂ  equal to + 3, 3 + 6 is equal to 9. So, a becomes 9 9 -7 is equal to 2 a becomesÂ  equal to 2 and finally 2 + 8 is equal to 10 we have reached the end of the array that is theÂ  final value that should be returned by the reduce and let us see sure enough what happens is thatÂ  it prints out the value 10. So, once again how was this obtained it takes the 0 as the startingÂ  value the accumulator initial value and after that repeatedly applies this function a, i givingÂ  a + i to each of the values coming from x. And after applying it the result is now storedÂ  in a you could have done the same thing using a for loop of course. But the point is thatÂ  writing it in this manner is a very compact and efficient way of expressing your code it isÂ  not just about you know using less lines of code. The fact that you are able to give itÂ  as a reduce has implications for how a compiler can then interpret it and optimizeÂ  it for implementation on parallel hardware in some cases that is not done in Javascript. But in general that is the reason why functions like reduce are used the interesting thing isÂ  I could also change this I do not need to have this reduce with just plus I could have anotherÂ  function in this case I am multiplying and then of course if you know if I start multiplying with 0Â  as the initial value of course the final value is going to be 0. Instead I start with 1 and when IÂ  run it I find that you know the product is 1 into 2 into 3 into 4 8 and because there are 3 minusÂ  signs over here the final result is negative. Now there are also a couple of other functions xÂ  dot sort what does x dot sort do this is probably what no not what you expect right. The first thingÂ  that we might expect is of course the negative number should come first but something went wrongÂ  I should have seen -7 as the first entry. And the reason why that is not happening is becauseÂ  this is basically doing what is called a lexical sort it is doing a string based sorting.  So, the minus sign of course comes first but after that the order becomes 2 4 7. what happensÂ  if I actually wanted to sort them as numbers I have to explicitly tell it to sort itÂ  as numbers I basically say x dot sort and I pass in the function to use as theÂ  comparator over here. Take two values a and b take the value a - b and if that is less thanÂ  zero it means a is less than b if it is greater than zero it means a is greater than b and if itÂ  is equal to zero it means a is equal to b. In other words that is what the sort is assumingÂ  as the comparison function. The good thing is if you can declare some other function which wouldÂ  do that for a string or an object or anything else you could use the same x dot sort on those stringsÂ  or objects what happens now when we run it this way. Now it knows to treat them as numbers andÂ  we get the proper sorted order as we expect. Now one last part over hereÂ  which is for the destructuring. Let us look at what we have over here weÂ  have declared an array x is equal to 1 2 3 and then I say a, b is equal to x and what doÂ  I expect a and b to contain I mean I am now sort of saying you know x had three elements the newÂ  array into which I am destructuring x has only two elements let me log a and b separately. And what happens is a gets the value 1 b gets the value 2 what happens to the 3 that wasÂ  present in x it is basically ignored. So, destructuring is sort of able to pull out aÂ  partial subset of the values. Now you can do this further the same destructuring but now applyÂ  it to objects and this is where things really start to get interesting ok. So, I am declaringÂ  an object directly declaring it as a person. And saying that yeah you know this is uh it hasÂ  one parameter called first name another one called last name another one called age and anotherÂ  one called the city all of which are basically separated by commas and are present over here.Â  Now let me just print this out directly and see what happens I find that it basically just dumpsÂ  the entire thing pretty much as I typed it in. But what I am doing here is something else I amÂ  basically saying cons first name colon fn city colon c is equal to person. So, what exactly isÂ  this it starts and ends with curly brackets. So, it is like I am creating an object and in thisÂ  object it has I am basically saying take the first name from person and call it the variable fn andÂ  take the city from person and make it variable cC which means that at this point if I now log fn andÂ  c remember that I have created an object without any name of its own the object is not named. I am using it directly to give names to these two variables which means that from that point onwardsÂ  I can declare I can use fn and I can use c, does that work? Yes sure enough it takes the firstÂ  name from the person object and c becomes the city ah what else can I do? I can alsoÂ  directly say const last name colon, h I do not need to rename itÂ  and then what will happen is uh yeah I need to log those values ofÂ  course. So, that they are visible. And when I log that it basically says it printsÂ  out the last name and it prints out the age. So, in other words this first name colonÂ  fn was just if I wanted to rename it if I did not I could directly have used last nameÂ  itself as a variable from this point onwards. Now you can do something further which is that you can basically say const first name andÂ  everything else gets sort of spread into rem. So, let us look at first what first nameÂ  looks like and that is pretty much what you know as expected it turns out to be theÂ  first name that was present inside the object what's more interesting is rem the remainderÂ  is now an object and it has all the remaining keys. So, it has basically taken the firstÂ  name alone out and it has destructured everything else such that the first name goesÂ  out of the object all the others get created into a new object with the remaining keys. So essentially what we have done over here is this becomes very powerful because you can useÂ  this kind of destructuring when you are passing parameters into a function. You could declareÂ  the parameter going into a function as an object and inside the function directly sort of say youÂ  know I will pick out only the values that I want and if you have any default values you couldÂ  declare them as well inside the function. There are techniques for doing that youÂ  can look up how this is done in practice for. Now I just want to sort ofÂ  mention how this can be used. ",
        "duration_minutes": 50,
        "keywords": [
          "arrays",
          "iteration",
          "map",
          "filter",
          "reduce",
          "destructuring",
          "generators",
          "functional programming"
        ]
      },
      {
        "lecture_id": 4,
        "week_id": 2,
        "order": 2,
        "title": "JavaScript Modules and Object-Oriented Programming",
        "resource_type": "pdf",
        "resource_url": "MAD 2.pdf",
        "content_extract": "JavaScript collections include various data structures such as arrays, maps, sets, and objects that allow developers to store and manipulate data efficiently. Arrays are fundamental collections that can hold objects of any type, including numbers, strings, functions, and even mixed types. Arrays support indexed access, allowing developers to retrieve elements using numerical indices, determine the array length, and manage holes within arrays. Iteration over collections is an essential concept in JavaScript, allowing elements to be processed sequentially. JavaScript provides multiple iteration methods, such as for loops, forEach, map, filter, and find, each serving specific purposes in transforming or filtering data. Iterables are objects whose contents can be accessed sequentially, including arrays, strings, maps, and sets. Iterators serve as pointers that traverse elements within an iterable. JavaScript provides helper functions like Object.keys() and Object.entries() to iterate over objects. Iterations and transformations leverage functions as inputs, such as map for applying a function to each element, filter for selecting specific elements based on conditions, and find for retrieving the first matching element. These functional programming techniques enable transformation chains that process data in a structured manner. Callbacks play a crucial role in JavaScript by allowing functions to be passed as arguments to other functions, enabling dynamic behavior and asynchronous processing. Beyond arrays, JavaScript includes maps, which function as proper dictionaries with key-value pairs, and sets, which store unique values. WeakMaps provide memory-efficient key-value storage with automatic garbage collection benefits. Destructuring simplifies array and object manipulation by extracting values into separate variables, improving code readability and ease of function parameter handling. Generators, an advanced JavaScript feature, enable functions to yield values one at a time, allowing the creation of computed iterables and dynamically generated iterators. JavaScript promotes modularity by grouping related functions, objects, and values into modules. The 'export' keyword allows values to be shared with other scripts, while 'import' enables the reuse of modules. JavaScript modules can be implemented in various ways, such as embedding scripts directly in the browser, using CommonJS for server-side modules with synchronous loading, or employing Asynchronous Module Definition (AMD) for browser-side modules. ECMAScript 6 introduced ES6 modules, which support asynchronous loading in both server and browser environments. The Node Package Manager (npm) facilitates JavaScript module management, particularly for Node.js, which serves as a command-line interface for JavaScript, mainly used for backend development but also applicable for frontend bundling through tools like Webpack and Rollup. In JavaScript, everything is an object, with object literals allowing values to be assigned to named parameters. Objects can include methods, which are functions defined within an object, and special variables such as 'this' that reference the current object context. JavaScript provides function methods like call(), apply(), and bind() to manipulate function execution contexts. Object.keys(), Object.values(), and Object.entries() allow objects to be used as dictionaries and iterated efficiently. JavaScript follows a prototype-based inheritance model, where objects can inherit properties from a prototype, ensuring single inheritance. Although JavaScript traditionally relied on prototypes, ES6 introduced class syntax as a more readable way to implement object-oriented programming while maintaining prototype-based inheritance. The constructor function within a class must explicitly call super() to invoke the parent classâ€™s constructor. JavaScript does not support traditional multiple inheritance but allows mixins to incorporate functionality from multiple sources. Asynchronous programming is crucial in JavaScript, enabling non-blocking execution for tasks such as fetching data, handling user input, and performing background computations. Function calls operate using a call stack, which tracks function execution order. When a function is called, it is pushed onto the stack, and upon completion, it is popped off the stack. JavaScript employs an event loop and a task queue to manage asynchronous execution. Tasks, such as network requests or user interactions, are added to the task queue and executed when the call stack is empty. JavaScript guarantees run-to-completion execution, ensuring that each task runs fully before the next one begins. Blocking operations, such as long-running computations, can freeze the browser if executed synchronously. Developers can mitigate this by using asynchronous programming techniques like callbacks, promises, and async/await. Callbacks prevent blocking by deferring function execution until a task completes, allowing other operations to proceed. An example of synchronous file reading in Node.js involves using fs.readFileSync(), which halts execution until the file is read. In contrast, asynchronous file reading with fs.readFile() allows other code to run while waiting for the file operation to complete. While asynchronous code enhances performance, it introduces complexity, requiring developers to use async libraries and functions efficiently. Promises and async functions simplify asynchronous workflows, enabling cleaner, more readable code. JSON (JavaScript Object Notation) serves as a lightweight data format for serialization and communication. The JSON specification is fixed, meaning issues like trailing commas cannot be introduced despite potential benefits. JavaScript provides a global JSON object with methods like JSON.stringify() to convert objects to JSON format and JSON.parse() to parse JSON strings into JavaScript objects. JSON plays a vital role in data exchange between web applications and servers, ensuring a structured and readable format for transmitting information.",
        "duration_minutes": 55,
        "keywords": [
          "modules",
          "imports",
          "exports",
          "classes",
          "asynchrony",
          "object methods",
          "prototype"
        ]
      },
      {
        "lecture_id": 5,
        "week_id": 3,
        "order": 1,
        "title": "Frontend Architecture and Design Principles",
        "resource_type": "youtube",
        "video_url": "https://www.youtube.com/watch?v=ajdbhOTRlcI",
        "content_transcript": "um okay so today's topic is basically we are going to be talking about what it means or rather different techniques and different concepts that are associated with the idea of implementing a front end okay so from mad one essentially we have already you know in mad one we primarily focused on the so called back end and application logic itself right i mean we have some code written in python flask that allows us to implement a database connectivity the http server functionality the controller right and the different views which of course we did using templates jinja templates in the case of madwin and as you know we had already discussed that in math 2 one of the things we are going to do is look a little bit deeper into the front end right and see some few more techniques by which you can get a better user experience in terms of what can happen on the front end okay so first things first what do we mean by the front end right and in this context what i'm saying is this is the user facing part of an app okay it usually you will see these terms user interface which is ui and user experience which is ux coming up very often in conversation right or when you are reading on any articles and ultimately that's the important part the user is very important as far as the front end is concerned okay and it's sort of easy to dismiss it and say that oh you know it's like it's just about making it look fancy but that's not really the case the point is a good user interface and a good user experience can make the difference between an app that somebody will actually use versus something that has great functionality but nobody is interested in actually using it one very important thing to keep in mind over here is a good user interface is not the same thing as a fancy user interface okay in fact one of the most powerful and good user interfaces in existence is the so called command line right so those of you who have used the linux command line would be familiar with that you know that you know you can just type in commands you can sort of have multiple commands each of which does a specific kind of operation and using that command line interface the terminal you can chain those commands together right and create like really complex and interesting kinds of functionality now almost nobody right except a die hard linux fan is going to say that that's a beautiful interface okay but on the other hand it is a really good interface from the point of view of what it achieves and how elegantly it achieves it right so in my opinion at least it is an example of what you could call an elegant interface right it just does what is required without anything ultra fancy about it and in a very efficient manner okay so the fact that a user interface does not necessarily mean anything fancy but is the important part is how effective it is at being usable that's the main part that we are interested in now what are the requirements that we typically have from the front end okay and one thing that we can sort of say over here is we would prefer that we avoid any complex logic right what i mean by complex logic is anything which is the application logic anything which needs to do computations anything which needs to do sort of detailed comparisons and selections of different parts of the database all that should not be in the front end okay there should be some way by which the application logic can be sort of pushed nicely to the server where the data is stored and the front end only sort of makes data requests to the server and its only job is to portray the result of that request okay now what we would also prefer is that you don't really store any of the application data at the front end okay as far as possible and the reason for that is because you know at least the way that we are considering with web apps and so on it is entirely possible that our connection gets cut or something else happens which essentially results in loss of the communication between where we are looking at the application and what is happening on the server right and we already know that http is a stateless protocol and what we mean by a stateless protocol is that the messages that are exchanged between the client and the server do not by themselves depend on the state of the system okay that is not the same as saying that you cannot implement that you know it is impossible to have state in an http based system it is just that the protocol by itself is stateless which means that if you want to sort of give the illusion that you know the system has some memory and knows who you are or what you were doing there have to be some other ways of doing it which is not just part of the normal protocol itself okay so these are all sort of requirements that we would like to see in a front end framework for want of a better word right and there are also certain desirable aspects to it one of them is that it should be aesthetically pleasing right i just gave you an example of something which a lot of people may not normally consider aesthetically pleasing the command line but that also depends on you know where you're coming from and what you are used to right the point is it does not have any i mean then what i mean by the aesthetically pleasing is when you look at it you should not be sort of turned off you know you should not see like ugly looking fonts and things of that sort or colors which are just jarring which essentially make you feel okay i don't want to use this particular application right it's sort of obvious it's intuitive but it's something that a lot of people miss okay now the next thing is uh responsive and what i mean what i mean by responsive over here is probably a little different from the context from the word responsive as used in the context of css what i mean is that something an application is considered responsive when it responds to your interaction very quickly right let's say that you input something there is pretty much an immediate response to what you do you click somewhere on the screen there is an immediate response okay normally in css responsive is used in order to indicate something else which is the next word that i've got which is that it's adaptive right if you have different sort of outputs different screen sizes uh different kinds of monitors whatever it is on which you are displaying then you would like your user application to also adapt nicely to those contexts right and in very often in the context of css at least that word responsive is sometimes used to mean adaptive i am using it in this with these meanings over here okay so now all of these are sort of things that we would like to see in a front end right now how do we achieve this okay and in a large part what we are going to do this week as well as in the next couple of weeks is sort of show different ways by which we can use one particular framework in order to achieve a lot of these things and to have a nice sort of way of building up a good user interface okay and there is one concept over here which again you would probably have come across in other contexts right basically in the while talking about programming languages and this is more to do actually with something called a programming style you might also have heard of this as programming languages right there is something called an imperative style of programming and there is something else called a declarative style of programming right and there are other styles as well but these are the important ones for our purposes right now okay now what i mean by imperative programming is that if you want to achieve a certain result right you literally specify the sequence of actions that have to be taken right by the computer in order to achieve that final result okay so let's say that i want to have uh something on the screen right where there is a navigation bar right there is a footer there is some kind of a sidebar then there is some date module somewhere on a corner and then there is one blob of text over here there is a picture somewhere over here right this lets say is the final output that i want to see right in an imperative style of programming literally the way that i would do it is look at the screen right and now in the top whatever you know let's say 100 pixels of the screen go and draw a box make that the and you know within that box go and enter this text which is the left arrow for going back right arrow for going forward some link for going to the home page etcetera type in all of those things so that will be probably one function which as you run through the steps of the function we'll actually go through and draw the navigation button okay then after that i will have another function which basically says okay go through and draw the things corresponding to the footer then another one for the sidebar then another one for the picture and so on okay so imperative programs will basically go through this process of running the steps one by one and will draw whatever you want on the screen okay now for things like user interfaces it is often considered that there is a slightly better way of achieving this result where the programmer does not go around giving the sequence of steps what the programmer says is basically draw this picture right you say that at the top there should be a navigation bar at the bottom there should be a footer on the left there should be a sidebar in the middle there should be text right and there will be some kind of a compiler or an interpreter some intermediate piece of code which understands what you are trying to do and achieves all of these results okay so declarative programming allows the programmer to sort of concentrate on what their final result should look like rather than how to achieve that result okay so that is the primary difference that we are talking about over here in declarative programming you try and specify what you want the final result to be right whereas in imperative programming you give the exact sequence of steps how should you go about computing something okay now if you take a step back and think purely in terms of programming languages or arbitrary programs right let's say that i am trying to implement some kind of a climate simulation or something of that sort right or there using an imperative style of programming probably makes more sense right because literally i have a sequence of actions to follow i basically say okay i have all this data corresponding to climate information right maybe temperatures pressures air pressure latitudes longitudes all of those things read all of them right construct a model for that and then go through a time simulation where i say ok you know i am basically doing some kind of numerical integration in order to find out how the system will evolve with time okay so it makes sense to specify it in full detail whereas when you are talking about something like a user interface then specifying it in full detail like this may not really be the best way to go about doing things right instead you sort of broadly say okay i want to have a navigation bar i want to have a footer i want to have a sidebar and let some other system take care of making sure that all of those things are delivered and kept up to date okay so this whole business of that declarative programming style is something that we will be sort of looking at more and more and we will be understanding in the context of how we are building up front end front ends over here so this is actually a nice picture which i have taken from you know the flutter documentation flutter for those of you who don't know it is a separate sdk it's a software development kit right and is in fact in another programming language called dart right so this basically comes from google and it was originally developed sort of for android but also the whole point of flutter is that it is cross platform meaning that in principle at least if you develop something using flutter it should work on android it should work on ios right and probably also on i i believe it has targets even for you know the desktops and so on right now flutter is a very good platform a very good software development kit but that's not our focus over here we don't want to sort of get sidetracked and go into understanding flutter it's a bit more complicated what we have been trying throughout this course is to look at what are simple enough platforms that can give you an idea of what we are trying to convey over here right so that the concepts come through and then you should be able to apply these same concepts in other programming languages or in other sdks as well okay so what is this picture that we have got and in fact you know you can look at the page that from where i got this essentially it's you know in part of the documentation that says start thinking declaratively right and what they are saying is that for user interfaces using this declarative style of programming is preferable it is probably the best way to go about building your system okay now what are these what is this equation right essentially it's telling you that there is something over here called the application state okay and understanding what exactly application state means is a very important part of how you go about designing not just an application but its user interface as well okay and in this case what they are saying is once you have the application state you apply a set of functions to it which they are calling your build methods right and that should result in the layout as seen on the screen okay what exactly does this mean what it seems to be saying is that there is some magical you know entity called state which once i know what the state of the application is then the user interface should be uniquely determined because after all i am just applying a function to it and getting that final user interface output okay so what exactly do we mean by state that is something that is quite important to understand clearly to put it quite simply the state is essentially the memory of the system okay it consists of all internal details of the system it basically says everything that is required in order to reproduce a given state of the system okay that i mean i use the word given state of the system so you know it sounds like a circular definition but effectively what i am saying over here is if you have a specific set of things in the memory right that includes the database that includes what has been clicked on the screen that includes pretty much everything that you can think about the system at any given point in time you should be able to get back and reproduce this exact same state somewhere else okay and what that equation that i just showed you right ui is equal to f of state is telling you is that given a particular system state the system should always respond the same way to further inputs that is it should show you the same user interface and then respond the same way to further inputs okay now it is possible to think of applications that do not require any internal state right with where there is no concept of state you don't need to really store anything the user interface is just you know always constant but that effectively becomes a kind of trivial application trivial it's just a static page right without any sort of variable variation at all in it right whereas anything that you can think of as an application needs some kind of internal state to be effective and useful okay so let's look at a few more examples right so i am using this term system state it is again something which you may not commonly come across in multiple places but what the system state is saying is at least what i mean by system state is pretty much everything that describes the system right so for example if i am looking at something like amazon.in or flipkart.com right they have a complete database of available items the prices who are the registered users who are the ones who are currently logged in all of that information is stored somewhere in the databases right the databases themselves may be distributed they may be split among multiple types of databases right but at the end of the day if i have all of that information available to me i make a copy of that i can reproduce the exact system somewhere else similarly if i look at times of india as a newspaper website or the hindu or bbc whatever it is right i can basically get all the news articles they have ever published and also have some information about them all that put together would constitute the system state of that particular website right for something like nptel or the online degree course right all the students who are registered all their courses the marks certificates all of that information put together constitutes the system state okay now it's not very clear what you do with something like this it's not that i can actually ask what is the state of this system because it is huge right for any non-trivial application this is huge because among other things it constitutes the entire database that the system has right and the important point over here is if you look at this system state it is actually completely independent of the user interface that is it does not depend on who is looking at it or what you are seeing or how your web page looks like this is just background information that is required for reproducing the system at any given point in time okay so from the point of view of a front end developer this is important to know you need to know where your data is but on the other hand it does not directly affect how you design your application right instead what we have is something else called application state okay now application state is the application it's once again the system as seen by an individual user okay and examples of this would be you know on amazon or flipkart it's your shopping cart right what are the items that you have put into your shopping cart similarly do you have any user preferences right do you want to pay in indian rupees or in us dollars right on some cases it might even just be the theme of the thing right on gmail for example maybe you have chosen to have a different theme than the default right all of that is part of the application state in other words when i look at generating the user interface i need to know these pieces of information i need to know what are the what is the choice of theme that this person has right what kind of user preferences do they have what font well probably not the font but you know at least like uh in which style do they want to see the date displayed for example right all of those things are user preferences shopping carts all of that information is required in order for me to generate what the output user interface looks like right similarly when i log into one of my news websites i might find that you know the recommended news items for me are based on my past preferences you know what are the things that i like to read okay or else you might have a dashboard kind of a display right something which basically says okay these are all the courses that you are registered for or maybe on nptel these are the courses that are currently running number of students registered the state of the course you know have any quizzes been conducted all of that information is application state and now this becomes important from the point of view of the front end designer because i need to know what is the information i need to be present in this state and how it will impact my user interface okay and finally there is something else which is called ui state once again in the case of flutter they use this term ephemeral state okay now ephemeral the dictionary definition of this is basically something that lasts for a very short time okay and this is a term in fact used by flutter it makes a lot of sense effectively what it's saying is that it is the part of the application that is actually being interacted with okay so let's say that you are loading a particular page there might be some spinner icon that you know shows that currently loading right or something else which has a progress bar that says this much has been loaded right that has no real impact on the functionality of the system right mostly it is just something which is required for you to display something properly but even if that information is lost right it does not have any long-term impact on the functionality of the system okay so there might be for example uh on wikipedia there is a you know a talk page versus the no that's not really the best uh option but uh you know there are some of these websites on which you might have multiple tabs that you can select right and depending on which tab you select it will show you different pieces of information now which is the currently selected tab will determine what is shown on the screen but it's again just a short time a short term piece of information it doesn't have any long term effect on what you are on how the application actually behaves okay so these two things this application state and ephemeral state are important to keep in mind when you are going around designing an application and the front end corresponding to that okay so now with all of that so hopefully that sort of makes it clear what we mean by state as such in a system right now all this sounds good but one of the fundamental principles of http is that http by itself is stateless in other words the protocol is stateless okay the protocol does not have any way of remembering what the application state is right the protocol only allows you to define things like get and post and similar requests and the server then based on those right will be able to send back some information now in addition to that the server might also get some more information such as for example what cookies have been set or which ip address you are coming from right and it then has to infer something about the state of the client right including things like are you logged in that will probably depend on some cookie or the other right or it might depend on some other information which is somehow passed between the client and the server separately okay i mean it is passed over some http request but it is not part of the protocol itself okay this is something you know that it's sort of well worth thinking about clearly and you know understanding right why we keep on and on about http being stateless is that there are other transport protocols that are stateful okay where the protocol itself might say okay you know currently i am in a state where i can accept certain kind of requests or currently i'm in a state where you're only allowed to sort of close the connection or currently i'm in a state where you can send an image right you could have a kind of protocol that allows you to do something of that sort where the protocol itself also sets up some extra information between the client and the server http does not do that in http every request is more or less independent of the previous request a previous set of requests right and only by sort of keeping track of how the requests were made one after the other can the server sort of build up a picture of where the client is and thereby decide what to how to respond okay so with that background what it means is that you if you want to convey some state between the client and the server one possibility is that the client maintains an idea of what the application state is right and what the user interface looks like and based on the application state that it knows it sends request to the server for specific items and updates those items on the screen right the other possibility is that the client is a pure you know completely uh sort of ah a dumb client so to say right something which does not have any processing capabilities of its own right and the server maintains the complete state of the system it shows the client what kind of requests it is allowed to make at any given point in time by probably putting them in urls and depending on which url is clicked the server will then decide what to show next and sends the entire information back to the client okay so these are sort of the two extreme ways by which you can convey state and sort of have a concept of state and convey between a client and the server right and in actual front end what you will find is that you know you are trying to do something in between these okay so what i am going to do next is in order to explain all of this right i am going to take one particular example which is tic-tac-toe okay so what is picture its basically knots and crosses x and o right you would have come across it at some point in time essentially what we have is there will be a grid of this sort which is displayed on the screen right we assume that x is going to play first so let's say so what the user interface should do is it should allow the person to indicate either an x or an o marker right as soon as x has played the next turn goes to o right and let us say that o plays over here after that x plays somewhere else let us say that o plays in some other location finally x comes over here and thus at this point it should say okay x wins right or o wins or it's a draw right because it's entirely possible that you could also have a drop right neither side is winning so the game itself is very simple but we look at what exactly it means to sort of what are the things that you need to maintain as the state of the system different ways by which this can be implemented and where the state of the system is being recorded corresponding to those and we will use this in order to motivate one particular front end that we are going to be using moving forward which is view.js okay now some of you may already be familiar with some parts of view dot js or you know you may be really comfortable with programming in mu dot js we are going to be sort of taking baby steps in that direction right we are going to be using view.js in a very restricted manner okay and one thing that i would request is those who have prior experience with vue.js you might be used to using the command line interface and you know using like various modules and so on in view.js that's not what we are looking for over here right i am primarily using view as a platform for indicating certain basic concepts so and i am not an expert in view.js uh tejes the other instructor is like much more experienced with it but the point that we are trying to make over here is what we are trying to teach is not advanced view usage right what we are trying to do is to focus on concepts what is it that you can and cannot do and how do you sort of use it in order to build good applications okay so i can take a small break over here because after this i'm switching over to the demos if you have any questions if anything is there this would be a good time to ask uh yes somebody has raised hand should look like right but while developing that there are certain decisions where we have to take for example uh for some people having a header always there could be an easy to navigate but for some it could contain the it could consume the webpage space or for some now we're getting through the left hand panel would be comfortable but possum having wide area to view would be comfortable so how do we decide on those i mean that's a good question i think there have been a few phd thesis published on this topic uh there's no simple answer it completely depends on your application and uh problem is it's not just on the application it also depends on the person right so like you rightly pointed out it's not just and there might be certain applications for which it makes sense to have you know a large header or something of that sort but then it might also be personal preference right because for example you know i mean nowadays i see that pretty much every website that i look at has one huge big image right on top it's called that banner the jumbotron or whatever it is right i mean that seems to be the design style of the day right have a nice big jumbotron picture over there which sort of is supposed to convey something about your company or whatever it is and as you scroll down the further information sort of slides into view now i actually find that a bit irritating right i don't particularly like that but then that's my personal preference right so how do you sort of answer this in general a lot of it is just based on experience but there are websites that actually talk about good guidelines right so in mad one actually sorry application development one i had actually talked about i think nielsen jacob nelson's guidelines for ui design right and there is also i mean there are a few websites that talk about this another thing to keep in mind is the w3 consortium right worldwide web consortium they have their accessibility guidelines those are all good things to keep in mind right which generally are useful for people who are interested in you know having a usable good user interface but uh yeah beyond that uh there's no sort of clear cutting saying okay you know this is the right way or this is not the right way to do it okay so it's completely sort of dependent on what you are trying to do and also continuing with that how do you measure the page loading time because it also has some variable parameters that depends varies from user to user so is there any yes again see there is no standard that you can put over there right the you need to finally look at it by saying you know at the end of the day whoever is my user should have a good user experience right it's no use if you tell people that i have a you know i measured like whatever some hundred on light speed or something of that sort right uh but the user finally when they try loading your webpage it turns out that their experience is slow now in some cases it is not in your control it might be that the user has a poor or low bandwidth or high latency connection and you know there's nothing that you can do about that although i mean even there there are some tests that can be uh done which sort of say that you know even if the user has a low bandwidth connection how should you improve the performance and so on but otherwise you know it's not like uh this is some kind of a score scoring game where you just say i had a very good score why are you saying that my website is bad nobody really cares about the score beyond the point what they do care about is what does it actually feel like when they are trying to load your page okay so all of these things like i mean how do you measure it you have to measure well worst case is probably one thing that you need to do or you might have to look at some kind of average or median or something of that sort but you need to set your metrics and say that for these kind of users i will have you know this kind of good performance and so on um also sir uh can we what we show on this screen yeah can we decide that on the parameter of what is the bandwidth of user like google imp that the fast loading yeah i mean it can be done right so uh definitely it is possible uh i mean so forget about amp amp i think is something specific for accelerated mobile pages and there are some controversies also regarding that right i mean people felt that it becomes too google specific and so on but uh even if you look at the google gmail web page right they actually they have handled it in a very simple manner right when you are opening gmail.com you will see that at the bottom initially there is one thing which says click here for standard html for slow connections right so if the user the user can then take that decision if they find that it's not loading quickly enough for them they just click on that and yes they get something which is like pure html with very little javascript or no javascript and loads much faster okay so that kind of thing you could you you can choose either you can leave it to the user to select the low bandwidth uh version of the page or you can say that you know you will try and detect somehow how long it took them i mean but that's not easy right because mostly your communication is one way you are sending information to the user it's not very easy to sort of get the round trip time and find out how quickly they got it and so on there are ways of doing it but that becomes much more invasive right and but if you do have that information saying that a user is on a slow connection then maybe you can actually on the server side itself change and you know maybe either don't send some images or send smaller images lots of options are there for you as a designer right so as a designer or developer you have to we have to strike a balance between these scripts we use because that imperatively what i can understand is or reduces the page loading time uh wait wait what was that about imperative uh the the more scripts we use it hampers the page loading time uh yeah in general yes i can't think of any uh reason where running more scripts would help so yeah you know generally speaking as a rule of thumb having fewer scripts will probably be a good idea but that's not the only thing i mean if you're still sending large images or you know you have something else which makes your loading slow that can also cause problems okay so um so can we just not use stateful protocols everywhere rather than stateless why would you want to use stateful protocols they carry almost all the information uh around it let's see uh you have to sort of think back about how and in what context http was designed in the first place right see the internet by itself is i mean it is subject to broken connections right even like uh whatever you know uh nearly 30 years after the design of http uh we still have the problem of connection dropped or connection lost things of that sort happening right either you're on a mobile phone and you're you get into a bad signal area or uh your power goes off at home and your wi-fi gets cut right so now if you have a stateful protocol that causes lots of problems because what happens in a stateful protocol is that you have built up something the protocol knows exactly where you are and now suddenly it is not getting requests that it expected to see right and let's say that your connection goes for let's say five minutes and then comes back what is the state of your connection right because uh let's say that your phone rebooted okay or your uh desktop computer rebooted then what is the state of the connection because the desktop doesn't know the state of the connection anymore the server thinks that it is in a certain state right so stateful protocols are usually avoided in general for network related things unless you have a you know very strong way of guaranteeing that the connection will not be easily lost you can still recover right i mean let's say that a server gets some bad request in the case of a stateful protocol then it will have to start falling back saying okay now you know this did not make sense let me go and reestablish the connection and recreate the state from the beginning okay but usually the overhead associated with that is just too much it's not worth it because you know there are so many people trying to connect and trying to sort of maintain state like this for each and every one is not worth it so you usually look for better or other alternative ways of maintaining state okay okay i hope you can see my screen the problem is that now i can't really see what is there so i wish i would rely on you to let me know if there's any problem here sure all right so let's get to what i am going to do over here is look at basically four different implementations of this tic-tac-toe program right so what it what is tic-tac-toe essentially what we want is to have something where there is a board right which has nine entries in it and each time we want to be switching between a x and an o and allow the person to click on it okay so i am going to start with a very basic python based implementation right i'm using flask over here right and what i'm doing is i'm basically you know this is a very trivial kind of flask application but it makes sense because flask allows you to write trivial applications right now let us look at these two lines over here line three and line four right where essentially i am defining my board okay now how have i done it if you look at this you know this ah bracket zero star nine essentially what it it's saying is that i am creating a list of nine zero entries okay ah it's just a shortcut i could have written this as zero comma zero comma zero also you know it would have worked exactly the same and i also have this next which is a global variable right both of these board and next are global variables the initial state of board is all zeros and next has the value one right and as i put in on the comment over here one corresponds to x minus one corresponds to zero i could have directly you know instead chosen to have x and o itself as the entries over there i just did this because it made my life slightly easier when i was trying to check whether the game is completed or not okay so this is the in other words these two lines right this line three and line four the two variables that we have over here board and next they essentially correspond to the application state okay so this in the context of this very trivial example is what i mean by application state okay now with all of that and why have i declared it as a global variable because it has to be seen by multiple different things that are there in the application okay is this the only way of doing it there may have been better ways by which i can sort of you know have a board and a next variable and have them being shared across different parts of this the problem is that i mean first of all i you know i'm not like trying to complicate the thing over here i'm just using something simple that works right and in this case because i need to be able to access it from multiple different uh sort of urls in my flask application i am just declaring them as globals it makes life easier ok now the application itself is started like this i just set a static folder and a template folder and then i say that take the slash root that is to say when i start this application right and i define a function home page and all that it does is it renders a template right which is this file tick.html it passes in two variables into it one is the board and the other is the next value okay now inside tick.html what do i have this is a generic sort of html template right it has the basic tags over here if i look at this part right there is uh the head part of it just has a little bit of css styling not too much right just something which changes the background color you could get rid of this it's not really crucial in any way to how the system works right now inside the main body what i'm going to do is i'm going to have one header which basically says this is the next move right and that next move will have a little bit of jinja code in it which basically selects which image is to be shown okay so there are three images that i have stored somewhere in my system and depending on what the value of this next variable is right if it was minus 1 i will show o if it was 0 i will show b and if it was 1 i will show x okay so i have just basically created one small array and then just indexed into it just you know using a little bit of pythons writing at com compactly in python that's all but then after that how do i actually display the x and o grid right for that what i'm doing is i create a table because that seems to be a fairly reasonable way of making a grid it's not the best way right and in fact later on we will see a slightly better cleaner way of making a grid but it works right i mean this is good enough for what we have now i have set a few things right i basically specify the border and then after that i have a whole bunch of jinja code over here right which at least in my understanding turns out to be necessary in order to get the logic implemented properly okay now could this have been done better quite possibly right it's possible that you might have come up with a more compact way of doing it or you could even have pushed some of this computation out into the python code itself right and got back something which was much easier for the ginger to display right so it's not my purpose to sort of and one thing that you need to be very clear about is i am not at any stretch claiming that this is the most efficient or a clean implementation of the code okay it's fairly compact good enough for our purposes but that's about it and my purpose over here is not to sort of show that the python style is better or the javascript style is better or viewed.js is better i am just showing them as different options so anyway the you know i have a bunch of jinja code over here i set up the rows and within that i have another loop that sets up the individual table data entries right and in this you will see that there is some logic which basically says that if the current entry in any square is 0 i will convert that particular thing into a link right and whichever way it is i will basically display something which corresponds to whatever is this present sp class that is or b or x okay and every you know ah whenever c is equal to zero i start a new row and whenever c is equal to two i end up row right so that way i will basically get a table with three rows in it each row will therefore have three columns okay now let me go back over here sorry in my app dot py in other words what it says is with this home page it will render tick.html let's take a look and see what that looks like okay so i have my python environment already set up and what i do is i just run python app.py right and of course it gives me the warnings this is a development server and so on and when i click on that link and open it it brings up the browser which basically has you know the headline as i expected next move is x and it has created a table and you will see that each of these things basically corresponds to a url okay these are clickable links so in other words everything over here has become a clickable link okay and you will see as i hover over it i hope you can see the link at the bottom the top left basically says set slash zero set slash one set slash two set slash three and so on right so each one of these is sort of going to the set end point but with a different parameter zero to eight right so now let's look at how we get the functionality for set and what i'm going to say is i will define a new function in my python code set value i call up the global board and next variables right i have to declare them as globals over here because i am actually going to change their value if i do not declare this global i will end up creating a local variable and modifying its value which is not what i want in this case right so you have to be careful to actually explicitly declare this as global origin so what i am going to do is very simple i just say that board of i whichever i is right set 0 would basically set the element number 0 board of 0 to be the value next and because i chose 1 n minus 1 then next equal to minus next is sufficient i don't need to check whether it is currently x and then make it o and so on right after that i have this additional function check state of board i will get to that later right let us ignore it for now now what it says is and you can sort of imagine what is happening over here r is equal to check state of board the idea is that if r is equal to zero right as we will see later when we go through the check state function i will basically redirect back to the home page slash okay so now let me see what that implies in terms of this let's say i go and click over here set 0 okay it goes it immediately changes it to an x and now you will see that because of the jinja template right this is no longer a link right you remember there was this piece of code in tic.html which checked if e is equal to 0 and only then it allowed you to make it a link okay same way i can go through over here i have some other options right i do all of this and now i have something which the moment i click over here it basically says congratulations in other words it has detected that one right and it also provides me with a new link for player game right so how does that part work i need to define this function check state which basically looks through all possible patterns where you could have a winning order right that is entries number zero one two three four five six seven eight these are the horizontal rows zero three six one four seven two five eight these are the vertical columns zero four eight and two four six are the diagonals in every one of these patterns it basically just adds up the values which are there in that pattern and if the result is 3 it says x 1 if it is minus 3 it says o 1 otherwise it sets r equal to 0 right ok i mean it doesn't need this r equal to zero it just sort of goes through the board if any entry in the board is currently zero it immediately says game is still in progress otherwise it returns two for a draw okay now what the set value function does is it basically checks whether r is equal to 0 if so the game is still in progress otherwise it renders the end dot html template now was this necessary i could probably have done it with the same tic.html itself right i don't think it was necessary to have a separate end.html because if you look at it it's you know more or less the same as what tic.html had right so but you know i was being lazy i didn't really bother to refactor or reduce that so this is how i have done it right now how does that work if i click on play again i can then basically go through and say yeah let me just make sure unfortunately x1 okay i need to make sure i can't win this yeah so no unfortunately it seems to have got some kind of a bug it should have shown that it's a draw right instead i've got some message which sort of says that b1 so i've got a small bit of problematic logic over there that i need to fix okay so the bottom line is let us go back and look at the code itself board and next indicated the complete state of the system right the application is created and what it does is it defines these endpoints there is one basic home page endpoint and there is one thing for set okay and the set is used in order to set the value of any given entry in the board okay now let's look at what happens of course i mean finally this new game function over here the slash new all that it does is it basically creates a new board right and redirects to slash okay so this is also very simple piece of code now the interesting thing over here is let's say i do this play again right and i play a couple of different things now i am going to reload this page okay and you can't really see it but it so happens that you know it reloads instantly but shows me exactly the same state as before now let me do something more interesting i open one incognito window right and put it into that in other words this is some other browser somebody else is accessing it i go there and find exactly the same state of the system okay and if i continue doing this over here right and then after that close this window i see that there is something else over here but when i try clicking on this it basically you know it refreshes the page to the state that is already known by the system okay and then only allows me to continue by clicking on the things that are not already been kicked okay so in other words by maintaining the entire state on the server side the client has almost no smart functionality right it just has a set of links that can be clicked everything is done purely on the server you can reload the page you can disconnect you can go away come back later and you will find that the server is still in the correct state that you last left it somebody else connects to it in this case of course i mean they will see the same state you could change it so that the server looks at let's say the ib address from which you are connecting and then shows you a different game or something of that sort but the bottom line is everything is maintained at the server okay so this is an example of the sort of most trivial form of implementing this entire logic using a python flask approach okay are there any questions on this before we move forward to the next one which is a javascript implementation all right sounds good so uh right so now we saw what this looks like in python right let's go forward and look at the next thing which is i'm going to try and do the same thing using javascript over here okay and first things first when we have javascript right what ends up happening is that i need to have an html page right how does javascript work i basically once again have some html you know i use the same sort of styling which was probably not required now the thing though is right in the body part i am doing something slightly different right i basically declare one span and give it the id next okay now that's i could have called it something else i could probably have called it message or something of that sort right but you look at it and you realize that it doesn't actually have any data corresponding to it there's nothing in this in other words if i try rendering this html page by itself nothing is going to come up after that i declare a table and inside the table i find that all that i am doing is declaring a bunch of spans okay each one of these basically is declared like this so in other words the entire table has been put in place explicitly right so you can see that it is a three by three grid but there is no logic there is no content in other words if i just look at this html page on a browser that where javascript has been turned off i will see nothing on the screen okay i could of course have something else maybe which you know has one dummy span where it basically says oh you need to turn on javascript and if javascript is present you know change the content of that span to be empty or something like that okay that would probably be the cleanest way of saying okay you need to have javascript enabled in order to view this obviously the entire work of displaying anything is being handled through this last step over here which is the loading of the javascript file okay so i just put that in at the bottom over here and let me then see what tic tac toy dot js actually corresponds to right so tic-tac-toe.js very similar if you look at it right i mean in terms of the pure functionality pretty much like what was done in the case of python right i have a board declared as a global variable so you see what's happening here i have declared these all these lets up here at the top of the script which effectively automatically makes them globals okay i mean as a general matter of principle now that we are in uh you know es 2020 or whatever is the version of javascript that we are looking at right at least ecmascript 6 and beyond i'm not going to be using var anywhere right it is pretty much either let or const depending on what we are trying to do okay you might find that other people use wire but generally speaking that's to be avoided at this point in time okay so i initialize the board i initialize the next value to be one and i also have one more variable that basically has this thing saying this is the current state of the game okay i have a function that i call reset board okay which in this case you know is basically all that it's doing is once again setting the values of board next and g state to be their initial values and then calling a function called update page right and this update page is the one where all the work actually happens right so it basically looks for this element next and sets the inner html of that to be either next move x or next move o etcetera right and if g state is equal to one that is uh the x one then it will basically say a x one otherwise it will say o one otherwise it will finally say oh that was a boring draw okay and it will finally also at that point alone it will bring up this button that allows me to click on this thing saying play again okay and what i am doing over here is i also have one small piece of logic over here that takes those spans right what were the spans that we had over there we had all of these td 0 td 1 etcetera these pans what do i do with them i get them by id td plus 0 1 2 3 etcetera and set the inner html of that to be either an x or an o depending on what it was and associate an on click entry with it okay and what is on click entry on click do it basically calls update entry of 0 1 2 3 whatever the status value that you have over there now this check state function is exactly the same as you know what was there in the python code just written in javascript this time right and you might notice that you know there is this line over here where i have used one reduce function in javascript right just trying to be clever over here it looks nice that's all you would have done it using a for loop or any other way all would have worked exactly the same but what does this update entry do it checks whether the game is still in progress that is to say g state is equal to zero right and if the current location in the board has a zero entry that is it has not yet become an x or an o if so then it sets the value to next it toggles the value of next and once again calls this check state function right after that after doing all of this it calls update page okay and so what have i done i have basically declared a bunch of functions there is one helper function out here which just returns xor o there is reset board then there is update page there is check state and update entry i have declared a whole bunch of functions and finally i just call this preset board so this is the actual functionality of the board as it happens okay what happens when we try and load this into a browser okay so this is no longer and we are not interested in the python version anymore we are going to look at the javascript version i will directly load it [Music] yeah so this is the javascript version of my same functionality right and as you can see nothing is there i mean i don't see any links i don't the cursor doesn't change in shape nothing of that sort but when i go and click somewhere it promptly updates okay and then i click here it updates it does all of this logic right and the moment i do this it basically says ao1 right and it now provides a button right so that entire span with next in it now has this thing for play again with the button it's possible to have got it looking exactly like the python version but on the other hand i i didn't really want to i mean i've made like slight changes in each one here and there right this is just so that okay the moment i click on this button it once again resets the board and goes back okay if you look at the total amount of code over here it is almost the same because you know you can imagine that the logic for checking the state for example is identical right the update entry is more or less the same the messages that are being generated at the top are you know they are dominated by the message itself that needs to be sent right so nothing really to say that either python or javascript is better so clearly the changes are somewhere else let's see one important change right which is that i've got all this over here and now what i'm going to do is go and click on reload the page okay it's gone right whatever i had over there is gone and it has been reset to a new board right so i go here i do all of this right and at this point once again i reload the page once again everything is lost okay and i do some more over here let's say that i also create one more page and load it right i find that that also that once again starts with a new page right where once again i can start playing some more i go back to the old one i can still continue on it and it remains where it last left off whereas this other one is playing something else okay so i have these two different versions that are effectively you know running in parallel with each other right and it doesn't matter which one ah sort of worked first nothing of that sort i they are effectively playing independently but the moment i reload the page i would find that i get reset to the original state okay so what has happened over here if you look at it there is actually no server at all involved in this right because look at the url up here i have directly loaded it as a file that was enough for it to load the javascript and to execute right and the reason it did that is because there was nothing really potentially damaging out here right you can't really go and like change any values or do anything else with this right so it allows you to straight away run the javascript which is there in that tic-tac-toe.js file right the state is completely contained on the browser which is why when i reload the page the state gets reset okay if i wanted to communicate this state back to the server first of all i need to have a server running right and second thing is i would need to think of some other way by which every time i click over here you know the state actually goes back to the server okay that is actually part of where the power of javascript comes into play or you know the asynchronous loads and so on but we will not be looking at that this week we will look at it later right in terms of how you can implement certain kinds of functionality for now the important part is the basic functionality could be implemented completely in javascript but now the entire state is maintained on the client with no knowledge at all for the server okay now once again time for a small break before we move on to the framework view.js any questions yes go ahead yeah i think you can just go ahead and mute and ask because uh no i yeah good evening sir am i audible yes yes go ahead yeah sir uh this a synchronicity that you speak of of javascript yeah is this something intrinsic to javascript or uh did it did this come about in the later revisions no no so uh i think uh actually i had mentioned this in uh the second week uh lectures right i mean javascript because of its nature the fact that it was meant to be used on browsers right from the beginning people wanted it to be such uh you know written in such a way and rather the language to have features such that it should not block the browser unnecessarily okay so because that was sort of uh important factor to keep in mind while designing the language right from the beginning you will see that this notion of asynchronous interaction was there okay but the whole idea of sort of retrieving data using fetch from urls and so on started becoming popular only around 2004 or thereabouts that's when it really took off which means that from that point onwards javascript had this whole idea of asynchrony okay yeah does that answer yes yeah see the idea of asynchronous operation is not unique to javascript there are many languages especially today that do have this concept of asynchrony right so and they are used in different contexts i mean primarily they need to sort of make use of the fact that anything which is long running versus anything which needs user response or user interaction they should not sort of conflict with each other okay yes i got it thanks all right okay so what i'm going to do next is to look at this framework called view okay so view is v u v right i mean it's pronounced view but it's written v u e and uh it has nothing to do with the you know the view in model view controller although it does follow a sort of model view controller type of approach to how you can update and display things of course i think some people say that it's not model view controller it's supposed to be some variant of that but you can understand it in similar concepts at least okay now the important thing about view is that it is basically you can think of it as a set of extra library functions on top of javascript so it's not a new language by itself it's not something which is fundamentally different what it's doing is it's using some of the core ideas of javascript but providing you with a sort of cleaner interface right that allows you to do certain kinds of front-end development more easily okay so to understand what exactly that is the best thing to do of course is to look at examples right so let me bring up some examples i will close these other windows to avoid any confusion and yes so once again after all view is also a javascript i mean it's based on javascript right so the html file over there looks very similar to what you would have in the case of javascript right now i have got rid of the style over here but you know that's i didn't do that to sort of make it look as though this is a shorter file or anything of that sort i just found that it wasn't very convenient to use those classes so i left it out one thing you'll notice is that in the header itself i am loading this view.js the core library okay and that's pretty much all that is required in order to get view into the system but my actual script is down here right now would it work if both were in the header i am not entirely sure of that i i think that you know the script that gets executed has to be inside the body so i've kept it over there as it is okay now the only you will again find that you know there is a span instead of next i am calling it a head message right and you will notice that i am actually using something new over here something which says vhtml equals head message right we'll get to what that is in a moment but the important thing over here is on this line 10 right i am declaring a div okay effectively the way that view works is to take everything which is inside some specified div in your specific some specified element inside your html page and apply view functionality onto that okay the usual thing is to declare it as a div give it an id and once you have given the id to that particular div you will take over and you know replace everything which is there inside that id now what is there once again just like in the case of the uh you know javascript example i declare a table i have the rows i declare all the 0 1 2 and so on okay could i have done this better could i have just created a you know written of nested for loops in javascript that generate all the output for you yes i mean bottom line is yes that could be done right in this case it was simple enough that it was not worth the trouble right i mean i can focus more on the remaining parts of it so the table the table row table data all are well known things the stick that we have over here is something new okay so it's not a normal html tag right it is clearly something which did not exist before and it is something which i have written for using view let us take a look and try and understand what it does so that all that is contained inside this tic-tac-toe view.js file right and that file essentially contains a fair amount of logic okay but if you look at it large parts of the logic are essentially just fairly fixed ah you know similar to what was already there in the python and javascript versions okay now let's ignore this initial path this line 1 to 15 right and focus on line 16 where i am creating the new view app okay and what i do is i specify that it is a new view app there is one element called el right so this is basically look at what is being given here i am passing in an object to the view function right the view constructive right so this new means that i am basically this is a class right view is a class and this new basically means that i am creating a new instance of this particular class associating it with the element which has the id app okay which is what i have over here right the divide equal to app is what i need to specify as the e l out here and apart from that there are a few different sort of uh you know parameters that this object that is passed into view needs to have one of them is called data which is basically the data corresponding to this particular application and as you can imagine that data is now the board and the next value okay whatever we had declared as globals in the python and javascript now are not globals they belong to this particular view instance okay what about the methods inside it now it turns out that methods are things that can be called on this particular view instance right and i will see that you know there are places where i am going to explicitly call this particular method set val for instance okay so when i want to set one particular value right i am going to go in there and ah have this thing basically calling the uh you know set val with i which is is 0 1 2 3 up to 8 ok and what it will do is it will once again check whether something called this dot result is equal to 0 right which means that the game is still in progress if it is it will set a check if the particular board entry is 0 and if it is then it will basically say this dot board of i is equal to this dot next okay ideally this line should just have been this dot board of i is equal to this dot next ok but you will be wondering ok so why use this particular you know why is this line alone a bit more complicated right ideally i should have had something which looks like right this should have been sufficient in fact this is what i initially wrote and then struggled around it with it for a little while until i finally realized that view does not work with this it turns out that is something to do with the way that view implements what is called reactivity okay view is looking for any changes in variables and it sort of puts in extra logic which says that anytime a variable changes something needs to get updated okay and it turns out that for arrays that doesn't work the way that you would normally expect it to which is why for arrays you need to have this explicit this view.set functionality being called okay it's a small sort of gacha that you have over there that you need to keep in mind right so we will ignore that we will get rid of it right and yeah basically the next thing this dot next at least can just be given as minus this dot next you can use the normal logic that you are used to and it works as you would expect okay now we come to an interesting thing which is these two things called the computed functions okay or computed parameters and what we are saying is that i have two things that are computed one of them is this head message okay where does head message go i can see it over here in my index.html right inside it should come inside this span right whatever is the value of head message should get reflected inside the span and what i am saying is i am declaring it as a computed function which means that if anything over here anything on the system changes right this function will be called and the value of the message that gets returned over here will be updated so when will anything change it will change any time that this dot next changes okay so in other words what view does is it performs what is effectively called a data flow analysis and says that under what conditions can this head message change right it looks through this entire logic which is there inside this head message and says ok look the only variable that i am looking at over here is this dot next which means that any time this dot next changes i need to go in there and recompute the value of head message okay now this kind of analysis saying that i look at what and all is being used inside this function or sorry there is one more thing this dot result is also something that needs to be checked okay so this dot next and this dot result these are the two values that need to be checked if either one of them changes head message needs to be recomputed okay what is this dot result that is one more computed function what does it do it basically checks whether anything on this dot board you know once again i do the summation and check whether x1 or o1 or game is still in progress or it's a draw right essentially anytime the board value changes it will go back recompute this and update the value of result whenever result changes that in turn will go and update the value of head message okay that's all i don't need to say when to compute the value of head message when to compute the value of result i don't need to go in there and explicitly call those functions one by one right view automatically takes care of making sure that the functions get called when required and at no other time right and that is a key thing this is where declarative programming has come into the picture i was able to just specify that result is this function it's a computed function head message is another computed function right and this is the actual data corresponding to my application right and this is my html code automatically view says oh we have i have bound this value cos equal to 0 over here right i need to go and update this tick element with something okay and what is that something that is declared up in the top part of the javascript code tick is something called a component right which is basically you can think of it as you know i am defining a new custom html tag all that i am saying is it has a certain property right which is passed in as props which in this case is called pause right the position right which will have a value between 0 to 8 what does it do it basically outputs some html corresponding to what the component should look like it has its own method one which is called set val which in turn calls the set valve function of the parent which is the actual view app and it also has a computed function which is this imgl which you know it's the image link that needs to go in over here now is this really the most efficient way of writing view code quite frankly no not at all right i just wrote this because i wanted to sort of show that yes you can have the basic ideas of reactivity right this idea that this vhtml will get updated with head message automatically similarly this component will update its value automatically without ever having to call that explicitly okay but after this we will look at a slightly more sort of more view ish manner of writing this code which will make it a bit more clear and you know you can see what the purpose of this whole thing is so let's see what happens when i try loading this page right i can basically go to view index.html now it pretty much looks exactly the same as my javascript code right and once again when i do this behavior wise also it's exactly the same okay and you can see that it pretty much has all the same functionality right the one thing that i left out i had forgotten to implement actually was how do i start a new game right i should have ideally added a button over here which allows you to sort of reset and start a new game i didn't do that instead i can just reload the page and i'll be done with it okay so you know the same kind of functionality as before uh works over here as well and it's a draw okay once again exactly the same constraints as what happened in javascript there is no server side state everything is maintained on the client if i open another page then i will effectively have another game running over there right the only real difference between this and the original javascript version is the fact that i now have this component called tick and some of these elements at least i can see that you know head message result and so on that concept of declarative programming has come into the picture over here i was able to just declare that you know the head message should change whenever result changes right and it will automatically be computed and updated i don't need to tell it that every time next is changed or every time the result changes go and compute head message the framework will find that out for itself okay so this is pretty much everything i am also going to show you the last version using a little bit more sort of you know what we would call idiomatic view right where it means that it is more in keeping with the way of writing a code in the view style okay so that is the next thing if there are any questions we can take that now or i can go and finish that okay so let me go through that you know it's very similar so it's worth sort of looking at that as well two things you will notice one is that now suddenly there is a lot of css styling over here the reason for that is you know nothing to do with view itself it's just that this is a different way of implementing the table or rather you know the output what i am saying is instead of having a table i am going to use a completely different way of rendering the tic-tac-toe grid by using something in css which is called flicks right and essentially what it says is that the board is going to be displayed using some flex parameter it will try and put as many entries as possible within the width of the board within the width of this board and once it fills up within the width of the board what it will do is it will wrap around to the next row okay and what are we going to put within that board i am going to put in a number of different cells right and i am specifying the width and height of the cell also the border around the cell and what you will notice is that the width of this 48 pixels right multiplied by 3 plus the borders is just under 156 pixels okay so i have chosen this width and height so that i can ensure that after three such cells have been put into one line it will automatically sort of go down to the next line and thereby automatically create a grid without me even having to create a three cross three table right but look at the app the body part of it now this has got simplified even more right even much less than what was there in the javascript i just have one entity called board okay yeah there is a question here oh yeah yeah i mean you know this particular code i will be putting on uh gitlab i mean i have it on gitlab i will be uh sharing it for sure keep in mind that you know these are not necessarily the most optimal codes so what i'm expecting from all of you is that you use this as a starting point use it to sort of get a flavor for how this works but then experiment with it and then go out and learn what are the best ways of writing certain styles of code okay all right let's get back to this so obviously the app itself is contained in this dtt comp right this javascript file now i have defined one component called tick right which has a property called val and it has just that property and a template right the template basically shows some html output and then i have a component called board right where you will notice that i have something which basically says that it has its the board has its own data but instead of the data just being declared as an object that's declared as a function okay why exactly is this done is a little bit tricky it's mentioned in the view documentation right that if you want a component to sort of carry a copy of its own code along with it then you need to declare it as a function okay you need to sort of understand a little bit about how view works internally in order to understand exactly why this happens for the time being we are sort of going to just take it as you know given and move on what does the board do it also has a corresponding template where all that i do is i basically you know create a class board talk inside that class there is this head message and there is a class called board right which i just use a v for loop and create tick components inside it okay so if you look at it all that it does is this tick this colon valve that i have over here is equivalent to you know the v bind colon val equal to and so on this is just a shortcut that is used in view similarly this add click is a shortcut for v on colon click equal to and so on right it makes it a little bit easier to write so we are using those shortcuts and writing the code this way okay so the template for this if you look at it will just basically generate this div out here what are the methods associated with this board essentially just this one method right update which checks the value of result if the board this board dot i is equal to 0 it calls view dot set for this board and updates the value of this dot next okay you will notice that i am not calling a function to update the result or do anything else over here as before i have a computed message right i have this head message and i have the result and that's it right so i don't have anything else sort of going in here i don't need to sort of look at any of the other logic i just declare each thing as what it should be right and at the end i create this app right and what happens when i try running it i find that if i open this index two dot html now it looks slightly different i am no longer using the images i am just using x and o directly right but you see that it has already formed a grid which looks more or less the same as before what happens when i click here the same functionality right once again if i click on something that's already been clicked it doesn't work because it's doing that check whether this dot board is equal to zero right and by doing this i can go through and you know implement the entire thing ah yeah it just says boring draw and stops over here right now once again i have to reload the page in order to move on right if i reload midway through it resets right all of that similar to the javascript functionality okay so the question that you might finally ask is what was the need for all of this right why go through this entire thing of creating components creating a component inside a component right why am i doing all of this the real elegance of view comes out when you start looking at reusing components okay and what do i mean by reusing components let's go look in the index.html right and i have this line bored over here all i am going to do is create one more copy of this board okay and let's see what happens when i now run it when i load the page it now shows me two grids i can play two games simultaneously okay so almost nothing was required over here in order to achieve this functionality right i can have one game completed the other game becomes a draw right midway through if i sort of reload each one of them then both of them are gone right it just gets back to the original state in both right it doesn't matter whether one was completed or not all i have is that you know each one sort of progresses independent of the other okay so what happened is we effectively created a component called a board which i could now just create uh you know just instantiate it somewhere this is the ultimate in sort of object orientation right i have created an object which stands by itself and just put it somewhere in the user interface and it takes care of everything it knows how to manage the styling it knows the size of the font everything is self contained even the logic associated with it is self contained right so if i wanted for example to implement multiple let's say chess boards that could be played one after the other right this looks like a really neat way of doing it and interestingly enough for those of you who are interested in chess the website chess.com which is one of the big sort of online chess things they are built on top of view okay now it is not that view is the only framework that can do this obviously there are others also that achieve very similar kinds of results view turns out to be simple and clean enough that we can use it in order to illustrate these ideas okay so that is pretty much it from me now yes so i am open to doubts i am all yes yeah so in the viewport yeah somewhere i saw a variable towards the bottom with a wire any specific reason why we're using wire and not a lid there yeah wait unlikely i don't think i used wire anywhere might have been val yeah because uh yeah i mean see in general i don't use where yeah so i tend to avoid using where for the simple reason you know as mentioned in the previous lectures i scoping rules with var are tricky so it doesn't really help to declare anything else where lit and const were sort of brought in purely to sort of fix problems with that right so yeah that's basically it thank you yeah so uh yeah you know this uh yeah it's interesting i guess some of you do play chess and chess.com does use it the funny thing is of course that you know you go look at the page source of something like chess.com right and you don't really see very much out there in the sense that you are not going to see anything with view i think you'll sort of have to look through it the logic to find out that there is something with view being loaded at some point and part of that is because a lot of this code is pre-rendered on the server side and sort of you know only minimized versions of the javascript are sent out to the users that's basically for performance reasons okay so all right ah there's a question how does the reactivity affect the idea of discriminating descriptive or declarative programming because i'm not sure what descriptive programming is declarative programming is yeah so declarative pretty much relies on the idea of reactivity right i mean in some sense it is sort of saying that i should be able to just declare where each thing is and in some sense the thing will take care of updating itself right and that's more or less what i have over here i have two boards i just put them onto the screen right i just put them into my html page and the entire logic for what needs to happen when something needs to get updated when it should sort of react to a click or to something else on the screen is all taken care of internally okay so that is the sense in which view is sort of helping with this kind of declarative programming uh can we minify the code in view.js or do we need separate frameworks i mean you know minification is something else i would not really want to talk about that right now see minifying is used only to make the amount of data sent over the network less so in fact if you look at the code that i have written here right this uh index.html right this script that i am loading on line 22 this is actually the development version right and when you are using it in production they themselves recommend a slightly different link to use which is already minified okay which sort of has a sort of more compact version of the code but if you are really trying to optimize then there are even other things for example view has some kind of a compilation process which will allow you to get only the parts that you need at least to some extent and you know put those together into different files that can be used all of that is right now more or less beyond the scope of what we are trying to do so i am not sort of getting into any of that at the moment there is another raised hand sorry i am not able to see who has raised the hand so please go ahead and ask i think kumar had oh hi sir good evening yeah so uh the right now reusability he was talking about that in the in the code the view js yeah so here since we are not doing anything we are playing on the browser suppose uh i want to store that information for temporary purpose that suppose to user is playing two different group is playing and that and we use that uh the functionality but we want to save on the servers somewhere correct in that case how can we uh handle this uh yeah no i mean that's a very uh relevant question c in fact if you look at it chess.com must be doing pretty much exactly the same thing right they can't be running purely on the client uh what would normally happen is that the on click function instead of just being something which goes and updates your local uh display will be something that actually results in a call to the server right telling it to update the state that is being stored on the server side and then the server will acknowledge with something which will then be reflected in the ui so that is near this sort of ajax kind of thing the asynchronous javascript and uh comes into the picture i have not got into that yet we will be looking at it later yeah so can i can i ask one more question here sure yeah yeah so i thought about that uh that something we can do as synchronous or the exact same but the question is that even we send any post or any request to the server so we need to change the its name or the something id so since we simply wrote the another uh the block and reusable we use that to reuse that so everything even its id its name everything will be copied the same way that i agree so you know i i sort of created this only as a toy example just to sort of say that you know you can sort of uh reuse blocks like this but when you are making requests and you want to be able to update one specific element you will need more information about the block this is definitely a toy example it's not exactly the right thing to do that but yeah in practice you will need a lot more so this was mostly you know just to sort of uh a flashy demonstration that you know you can very easily reuse a component but in practice you need more than that okay actually i was confused to thinking about that now now clear okay uh yeah yeah you know i will my problem is i have not made that gitlab link public yet i need to just check on a couple of things before i do that we will send it out right so by end of today itself yeah it will definitely be posted on the course portal i think that would be the best way to do it [Music] okay there's a question can we make a different play again button for different game like if we play again one game that doesn't affect the state or the other you know you can i mean that's up to you right i mean now that you know how the thing is implemented it's entirely up to you to try different examples and i would strongly recommend you try right if you can get some kind of things of that sort that's the best way to learn right so like you know in the previous question one of the things you will need to keep in mind over there is now you have two games going on how are you going to keep each game's data separate from the other if you have like one javascript with one global variable then you know whatever you have in one thing will just get reflected in the other one as well right so things of that sort are what you will need to keep in mind how do i sort of associate the local data for each uh board with itself how do i make sure they don't sort of stamp on each other how can i create sort of multiple parallel things uh how do i reflect this data onto the server so that you know if i need to reload or if i need to go away and come back at some other point will it still retain the state all of those are interesting things to see moving forward right the updating to the server is something that we will look at later but you know the other things like how do i play a new board or something of that sort is something you can even you know think about and try to implement on your own okay any other questions one thing sir is that class over or today's class or yes class is over here sorry so i'm done with the material for now so if there are no other questions we can break of course you know feel free to think about it and questions can come up on this course also later so the first question is that uh whatever the uh learning uh right now so the way the view was updating the theme and the it's changing the heading and everything automatically yeah so it's not making sense that how and where it is happening because i'm completely dependent that structure of the view and suppose we do from the javascript we know we are doing that but in the view the changing the things automatically changing it's kind of we have to remember other something like that because we don't know how it's internally happening no see i would not think of it that way think of view as just a sort of library of javascript it is it is providing extra functionality to javascript which allows you to program in a certain way right i mean see in python for example there is there are modules for everything right for example there is a module that can be used to pass csv files right so how do we use that we basically call csv dot file reader or something like that and then we say that look it will automatically take care of doing the comma separated reading and it will make sure that you know if there is any special characters it will mask them out properly certain things it will take care of on its own right so that's how we use a module in python same way view is also sort of a module in javascript that can be used for some specific kinds of functionality the point is it provides you with this way of looking at the code which is reactive right which means that you can now focus on ah basically you know deciding what to put where on the screen and just specifying how the functionality should update rather than you know saying okay you know i need to keep track of each and everything and go and recompute things on their own individually right so this idea of building components and reusing them is what view permits but uh yes at the end of the day it is just view is also javascript okay the entire thing view is written in javascript and if you go look into the view internals right the view documentation and all that it tells you about how it is actually taking your javascript code and sort of you know modifying the functionality so that this reactive behavior can be put in right there's really no magic there i mean uh well of course there is it looks like magic but the point is that you know ultimately what is reactive code it has to look for whenever there are changes in certain values and then go and recompute certain things and once those things are recomputed it has to go and redraw certain parts of the screen what view does is all of that thing finding out which are the things which changed what are the new values and what to redraw on the screen all of that it does by itself without you having to worry about it so you know react does the same thing angular has some parts that do something similar so all of them are ultimately trying to sort of take that part of you know having to worry about uh what gets displayed on the screen and hide it from the programmer hide it from the person who's developing just increases your productivity that's all correct i think it leaves you to do just maintain the data and logic don't worry about drawing this on the screen hey thanks by the way so you know feel free to add anything else i wasn't sure if you were on the call but yeah good that you are also here uh sorry there's one more question in compute.js when you made another board tag the two tic-tac-toe games were running independent does that imply that you we can have multiple instances of the same task see that's what i said it's not exactly the same task each of these board components right if i go look at the javascript each board component has its own data associated with it okay let me actually just try something you know something i'm not sure if it will work but i would like to try it anyway [Music] i believe that this will something else happen probably you wanted to assign it to an object or a variable and then return that i just wanted to have it as a variable directly instead of having it as a function and the and i was looking at something in the view documentation which said that if it was directly uh a variable then uh essentially the multiple instances would share the same value is that correct i'm not entirely sure of that okay i don't know so i would rather not get into that but yeah you know the point is that this board component has the data associated with it right which means that it is now carrying its own data along with it right which means that when i call update on this particular instance it goes and updates only this particular code correct i think that's the use of this here this dot is this specific data and this specific board so actually in the html when you create a board each one you can assume that it's like a new object being created or new instance being created and everything in and around that is created yeah yeah uh it's one question why is reactivity so important see it's at the bottom line it is just a question of uh convenience in some sense right uh it allows you as the developer to focus on what your ui should what the behavior should be rather than how it ah how that behavior is to be achieved you can sort of specify the different looks of different parts of the thing and you know not worry about how to go about updating each part of the screen correct and also i think historically web has been the uh web has been delivering documents which were like pretty much and at some point web also became an application platform right at that point uh they introduced cookies to maintain their session they introduced many things and this is like the next level where we are trying to add more to the ecosystem to make that application delivery much easier if you're just doing a simple document you didn't need any of this but we are actually trying to build an application which appears and feels like a desktop application so that's where all this comes into picture yeah i think that's a very important point i mean right exactly when when the web was only dealing with documents you did not need reactivity you need reactivity when that when you want the thing to sort of respond to certain functionality that you have which approach should be first viewer wait the first view approach or second approach i mean are you talking about the two examples that i showed over here with view i would say the second is better right simply because it is sort of more component oriented and sort of uses the ideas of view a bit more systematically right that you can compose components one inside the other you can sort of build the system properly out of components that's ultimately the way that you should be looking at it the first one is just you know making use of the fact that view has basic reactivity but it's not really i mean not doing anything more than that there was one more question from himanshu i think about swell now swell is a different framework right it also achieves very similar kinds of things in terms of reactivity and so on but it uses a compiler based approach meaning that it is ultimately you know see view can be used in multiple ways it can be used directly like a you know a library that i pulled in that's what i have done over here or you can you know try to uh construct a view application using the command line and uh you know do all of that stuff whereas with swelt you have to pretty much write everything in swell run it through the compiler and then load it but it is probably optimized better in some ways at least okay it looks like a very interesting framework there are lots of people who feel that it's a very nice way to go but the fundamental principles are again the same it is also building on reactivity how does a browser deal with custom tags okay how does it deal with custom tags [Music] i think that's part of the html5 spec at this point that if there is a custom tag then you know it has to be handled so that web component functionality allows javascript to register handlers for custom tags because correct i think more thing would be to look into web components and it's somewhat similar yeah so you know i mean unless you have sort of explicitly registered some kind of handler for a custom tag java html will actually the browser should ignore tags that it doesn't knows and rather it doesn't know right so if you use some arbitrary tag that you have created and you don't have any javascript to work on it it will just get ignored it's as though the tag isn't there at all and the reason for that is simply because browsers have been designed to be sort of very forgiving right i mean the approach that they take is that they will just ignore everything and anything there are no errors or rather it hides errors as much as possible okay sorry any further questions uh yes sir uh yeah this question is that in the screencast case talk about that one concept like that two-way winding so yeah true so to be what is actually use of that and how actually it is work because i tested that thing suppose there is a function defined in the something view dot js and there was a one input in the browser and another display on the browser so i am taking the three things one is the input on the browser another is display on the browser and one is the function defined in the [Music] view.js so whenever i change that uh something in the browser in the input the two thing changes as the display as well as simultaneously in the view of view.js data and i changed in the view.jsonview.js data through the console it is also changed as well as that input and the display so so correct that's why it's called two-way binding so so in the usual things what we have is you know you have the data if you then change the data the content of the div or content of the span changes correct so that's like a one way of you know changing where you change the data and the content of the div changes the other way is you know we have input elements you know i'm not talking about click as i input here i'm checking talking about form inputs for example text box or a drop down or whatever when you bind that to actually a data input it becomes two-way if you change the data it changed the actual contents of the input for example let's say you have a drop down and a data attached to you know that drop down if you change the data now the drop down value in the drop down changes or if you change the drop down the the value inside the data changes so that's why it's called two-way binding and that's that's very useful right for example in code somewhere you wanted to reset the value of the drop down for example some error happened and you want to reset the value of the drop down now all you need to change is the data in the thing and it will correspond it will change all the corresponding drop downs or inputs you don't have to worry about you know changing them okay so so the input to that uh input to the view.js it is the 2k connection what about that message in the view dot json the display about that double curly bracket in the uh browser so this is the one we only know correct that's just a template change yeah because i don't think you will change that's just a template that's one way yeah it's just a binding there yeah okay okay so yeah okay so it is very interesting uh thing we can use many places according to our convenience correct correct so i think you should know the concept of both and you could use whichever is relevant okay yes it is look like so this type of concept there is a no exist there is a no in the ginger or the flask this type of concept exist you know um see i think jinjon flash works the very server side right there's no actual user interaction at that point the advantage with javascript is it runs in your browser where there is user and he is doing something for for jinja to like have any input it should actually come to browser but all the rendering on the ginger happens on the server side okay yes yeah so whatever even the even synchronous way something is happening and if we are typing something on the uh input then it displays some other places in the browser not in the input itself not in the input like that in the view.js i changed tried to change the data in the view.js it changes it was changing even the inside the input content so it was correct correct quite amazing correct i mean that's the magic part but that's that's how it's supposed to happen okay that's the two-way binding here okay now it is there's one other question doesn't the browser just directly print and recognize html text i'm not entirely sure i think if you have you know a tag that it doesn't uh know about it should probably just you know you know it just prints something over there and ignores the tags around it right so it's not going to show you the tag but yeah print out whatever is inside but yeah like i said you know this is just something which uh decision that was taken early on that the browser should be as forgiving as possible uh sorry uh paige i think your audio was blinking sorry can you show the html part for this something yeah yeah it's just my tag yeah so if you see it will escape the tags but it will just print the contents of the tag yeah so it won't know how to handle the my tag slash my tag but it just rest of it it just prints it but my tag and like that tag itself it just skips it correct but if i had a view component called my tag or a web component or something which is registered as my tag then it would do whatever is you know according to that whatever template that particular component has would have been displayed instead okay all right ah thanks everyone and uh i guess we can close the session now uh like i said earlier you know we are we generally do sort of monitor the discourse or if at all we have not seen it then uh one of the others would alert us if there is something that we need to look at so please feel free to you know continue the conversations there and we'll close one thank you yeah thanks a lot sir thank you you ",
        "duration_minutes": 120,
        "keywords": [
          "frontend",
          "architecture",
          "state",
          "design patterns",
          "imperative vs declarative",
          "user experience",
          "responsiveness",
          "component architecture"
        ]
      },
      {
        "lecture_id": 6,
        "week_id": 3,
        "order": 2,
        "title": "Frontend Development Best Practices",
        "resource_type": "pdf",
        "resource_url": "MAD 3.pdf",
        "content_extract": "The frontend of a web application refers to the user-facing portion responsible for the User Interface (UI) and User Experience (UX). It serves as the layer where users interact with the application, providing visual representation and interactive capabilities. A well-designed frontend should avoid complex application logic, which should be handled by the backend. This separation of concerns ensures clarity and maintainability. Additionally, the frontend should not store data permanently, as persistent storage is the responsibility of the backend system. Since the HTTP protocol is stateless, frontend development must account for this characteristic by using techniques such as cookies, sessions, or tokens to maintain user-specific information. An effective frontend is not only functional but also aesthetically pleasing, responsive, and adaptive. Responsiveness ensures there is minimal lag or latency in user interactions, while adaptability allows the interface to function seamlessly across various devices and screen sizes. Different programming paradigms influence how frontends are built. The imperative programming style requires explicitly defining the sequence of actions to achieve a result. For instance, drawing navigation elements, filling in content, and waiting for user input are each handled as discrete steps using functions for each action. In contrast, the declarative programming style involves specifying the desired outcome without defining the step-by-step process to achieve it. This style allows the compiler or interpreter to manage function integration, simplifying development and enhancing code clarity. Managing state is a critical aspect of frontend development. State represents the internal details of a system and is necessary to ensure reproducibility, meaning that given the same system state and input, the output should always be consistent. In any non-trivial application, managing internal state is unavoidable due to the complexity of modern interactive systems. State can be categorized into three main types: system state, application state, and UI state. The system state refers to the complete database or dataset underlying the application. For instance, in large-scale platforms like Amazon or Flipkart, the system state includes information on product availability, pricing, and registered users. News platforms like The Hindu or BBC manage extensive archives of published articles as part of their system state. In educational platforms such as NPTEL, the system state encompasses records of students, courses, assessments, and certificates. This comprehensive data exists independently of the frontend and is crucial for maintaining the core functionality of the application. Application state, on the other hand, represents the portion of the system relevant to an individual user or session. This state includes interactive and session-specific data such as a userâ€™s shopping cart, preferences, selected themes, and personalized recommendations. For example, a userâ€™s dashboard in an educational portal reflects their enrolled courses, progress, and upcoming deadlines, all of which form part of the application state. Managing application state is essential for delivering personalized user experiences. UI state, also known as ephemeral state, pertains to the transient aspects of the user interface that only exist during active user interactions. This state is short-lived and can change rapidly based on user input. Examples include loading indicators, the currently selected tab in a multi-tab interface, or the visibility of modal dialogs. While ephemeral state is not essential for maintaining the core business logic, it significantly impacts the user experience by providing real-time feedback and enhancing interactivity. Given that HTTP is a stateless protocol, managing and preserving state across client-server interactions presents a challenge. There are two primary approaches to address this issue. In client-side state management, the client (usually the browser) is responsible for maintaining state and requests specific resources from the server as needed. This method is suitable for lightweight applications and reduces server load by offloading state management to the client. Conversely, in server-side state management, the server retains session-specific information and processes requests accordingly. This approach is more secure and suitable for applications requiring centralized control and data integrity. An illustrative example of state management can be seen in a simple Tic-Tac-Toe game. In this context, the application must determine what to display on the screen, how to capture user input, and how to process game logic. The UI must reflect the current game board, the application state must track player turns and game outcomes, and the system state may store historical game records. Effective coordination between these states ensures a smooth and consistent user experience. Modern frontend development leverages frameworks and libraries that facilitate efficient state management and improve development workflows. Frameworks like React, Vue, and Angular adopt a declarative approach, enabling developers to define UI components and their corresponding state. These frameworks often use virtual DOM diffing algorithms to optimize UI updates, ensuring high performance even in complex applications. State management libraries such as Redux, Pinia, and Vuex provide structured approaches to handling application-wide state, ensuring predictable data flow and easier debugging. In addition to managing state, modern frontends prioritize asynchrony to deliver seamless user experiences. Asynchronous operations enable non-blocking execution, allowing the UI to remain responsive while waiting for backend data. Common asynchronous patterns include using callbacks, promises, and async/await syntax to handle operations like fetching data from APIs, processing user input, and updating the UI dynamically. This asynchronous model aligns well with the event-driven nature of JavaScript and is vital for building interactive web applications. Security is another critical consideration in frontend development. Since the frontend interacts directly with users and handles sensitive information, implementing robust security practices is essential. Input validation, output sanitization, and adherence to the same-origin policy (SOP) are key techniques for mitigating vulnerabilities such as cross-site scripting (XSS) and cross-site request forgery (CSRF). Additionally, modern browsers enforce Content Security Policy (CSP) headers to restrict the execution of untrusted scripts and reduce the risk of code injection attacks. Performance optimization is crucial to ensure fast load times and smooth interactions in frontend applications. Techniques such as code splitting, lazy loading, and optimizing asset delivery via content delivery networks (CDNs) help reduce the time required to render pages. Browser caching and service workers enable offline access and background updates, improving performance for progressive web applications (PWAs). Efficient use of JavaScript, CSS, and image optimization further contributes to a responsive and performant frontend. Accessibility is another key consideration in frontend development, ensuring that web applications are usable by individuals with diverse needs and abilities. Implementing semantic HTML, providing alternative text for images, ensuring keyboard navigability, and adhering to the Web Content Accessibility Guidelines (WCAG) are fundamental practices for building inclusive frontends. Ensuring cross-browser compatibility is also vital, as users access applications through various devices and browsers. Testing across different environments helps identify and resolve inconsistencies, ensuring a uniform experience. In conclusion, modern frontend development encompasses a range of concepts, from managing state and ensuring performance to maintaining security and accessibility. By separating application logic from the frontend, adopting asynchronous patterns, and leveraging advanced frameworks, developers can build robust, scalable, and user-friendly applications. This comprehensive understanding of frontend principles and best practices forms the foundation for delivering high-quality web experiences.",
        "duration_minutes": 50,
        "keywords": [
          "performance",
          "accessibility",
          "responsive",
          "web standards",
          "state management",
          "UI optimization",
          "asynchronous programming",
          "security practices"
        ]
      },
      {
        "lecture_id": 7,
        "week_id": 4,
        "order": 1,
        "title": "Vue.js Reactive Programming Fundamentals",
        "resource_type": "youtube",
        "video_url": "https://www.youtube.com/watch?v=jtH0_hXp-co",
        "content_transcript": "Welcome to the Modern Application DevelopmentÂ  II screencast. In this screencast, we will continue to experiment with our app, andÂ  componentize it, and see, how we can improve it by using various features of Vue. For this,Â  you will need an editor. I am using Sublime Text here. As you can see, you need a browser. IÂ  have Firefox here, I have already installed the Vue, add-on, so that we can experimentÂ  with it. And, yeah, you can see here. Let us start. To begin with the we will rememberÂ  doing this app where every step can leave a name, and say hi, and then it adds up and showsÂ  the things. I have continued to use the same application, you can see the code here,Â  this is a HTML part, this is a JS part, and this is same file that I have openedÂ  here. And if you can enter your name, say hi, it shows your name here and number ofÂ  replies. Let us improve this a little bit. You know, what I will do is, I will remove thisÂ  message this top message we do not require. And I am going to remove this.Â  So, I am going to add another attribute incoming attribute called visitorÂ  message. Let us say we want to live name and message. And then, let us assume that we do notÂ  need to say any of this, we will just say, hi. And the say hi message isÂ  there, then visitor name, visitor message. Let us call these messages, let us store all the messages visitor leaves,Â  along with their name and actual message. So, this total message, we will makeÂ  it plural, messages will have when the hi called it will store both the name andÂ  the message. So, let us call this attributor as visitor name and then no visitor messages, visitorÂ  message. This will store this dot visitor message and then we will empty that, we willÂ  empty this, we will this. And yeah, let this be there. I think this will not becomeÂ  visitors dot length become messages dot count. Okay, here let us just check once, messages.Â  I am adding to messages when the hi is called. Okay, here, I think we are iterating throughÂ  visitors, we will not be iterating through visitors anymore we will be iterating throughÂ  messenger and each one called a message. And we can print message here, but we will notÂ  print the object we will print the this one visitor name and what message he left? That will be message open bracket, this is just attribute. IÂ  think this should work. Let us just check. Reload, so there it is. YourÂ  name, let us say Tej welcome, say hi. So, it is showing Tej and welcome.  Now, let us assume. I mean, this is not really like a production level application, but letÂ  us assume that there are three folks who are hosting this website, and you want three books orÂ  three guest books where folks can leave a message for three folks. For example, there is let us sayÂ  Tej s, messages board, Raj s messages board and Fatima s message board. And we want the same thingÂ  appear thrice, so that all of them can receive like a message here. It is a simple thing. WeÂ  are not storing anywhere, it is just a display, but we let us say we have three boards, thatÂ  would make you want to repeat all of this thrice, and write logic for that and all of that.Â  The easier way to do that would be to convert this into a component.  Now, it is very easy to convert the Vue application into a component. We will haveÂ  to just define a new Vue component. That can be done very easily, by calling Vue dot component.Â  Like the way we have a new Vue, we will call Vue component. Now Vue component actuallyÂ  takes two important attributes. One is a name, what you want to call the name toÂ  be, we want to call it message board. Let us called message board and then it takesÂ  optional parameters, just like our app. Now, Vue component is easy, we can justÂ  do it by just define the Vue component by calling Vue dot component, component. It takes two attributes, the first one beingÂ  the name, and the second is set of attributes. Let us say what do you want to call it, let us,Â  you want you want to call it message board because we want each, each one to get a message board,Â  like Tej, Supriya and Fatima to get a message board each, so we can call it message board.Â  Board, now it takes input parameters, just like our Vue app. Now, our Vue app is doing almost, youÂ  know, single message board tasks, we have to move all of these into our view component.  Let us do that and see what happens. Okay, we are going to copy the same thing, removeÂ  this and paste it here. I am going to format it, so everything remains same, butÂ  here, we are now going to use data as an attribute, but data will actuallyÂ  become a function, which returns the data, because we want to keep a set of data separate forÂ  each component. Also, it will become a function which returns the data, you can returnÂ  this. Just formatting a bit. Now, we have converted data into a function thisÂ  remains same, this remain same, everything else remains same. Now let us see how to use this. ThisÂ  is what we have defined, here, but the only thing that we missed is how we are going to write theÂ  content of the component, which is the template, which is actually here, this part. So, let us define a template. Template is defined by define the attributeÂ  template, use backtick to put component details, and we could just because each messageÂ  board will contain these details. So, we are going to take this and put thisÂ  into like our component because this whole thing is going to become component so the wholeÂ  thing, we are going to move into a template. Okay, so we have moved into a template. Now, ourÂ  whole application you kind of componentized into component. Now we can use this component multipleÂ  times, unlike our application, which is only one. So, let us see how to use it, and that's quiteÂ  easy. That you can do by just calling message. What was the name of theÂ  component? Message Board? Message board and slash message board. Okay,Â  let us refresh and see. I have kept things on. Okay, there seems to be some error. Let us see what is the error? Okay, so now itÂ  is throwing can error can read the error here. Text your name is outside theÂ  root element will be ignored. Basically, there is no root element, there areÂ  many parallel elements, there is no root element, because a component can have only one root elementÂ  and that one root element should be there. We do not have a root element here. So, we are goingÂ  to just add a div as our root element. Okay, let us add div as a root element. This should fix the template. Let us refresh this. Okay, error is gone. Now we canÂ  see if you actually click on view here and you can see there is root and thereÂ  is message board. If you click on message board, you can see its attribute and its functionsÂ  and stuff like that. Now you can give a name, and let us say welcome back, IÂ  say, hi, so it shows here. Now, the whole purpose of doing this was to haveÂ  three message borders three independent message boards. Let us add them, I am just going to makeÂ  it simple table to add them as like columns. You could use divs and you know, rows and columns using the frameworks that we have learnedÂ  before, using our standard framework, bootstrap, you can create rows and columns andÂ  then make them that way, but I am for a quick use, I am just going to make it into a table. A simple table with one row and column, three columns, each columnÂ  containing a message board. So, I can see message boards here. So, you can see three message boards. Let usÂ  make it little more. You can do any styling here, you can do what all the formatting that youÂ  want to add. So, I am just going to do like a P to bring them into next line. You can addÂ  your styles and other classes and other things. Let us refresh this. So, I can seeÂ  that now there behind there is a p. Let us say Tej, welcome back for this let us say Fatima s boardÂ  and this is the then say, hi, so it is reloading, that is because it is clearing the things,Â  not reloading actually, clearing the things. Let us say this one Manoj alsoÂ  says, hi, but to this board, and Raj again says, hi, to Fatima s board. ButÂ  now we want to add like a name for each of the one name of the board. We can do that by just addingÂ  for example a name here. We could probably like let us do, add a name here for each of theÂ  board. I will show you a better way of doing it but essentially let us start I would say yourÂ  had Tej s board, Fatema s board, Ruth s board. So, you can see here which board is whose. But I really do not want to do this. I want it to be part of our definitions of partÂ  of our board. I wanted to send a message along with this to actually our componentÂ  saying this is the board name, that you can do by sending a property or you can do, forÂ  example, say title of the board and say Tej s board instead of doing here we are going toÂ  send it and make it part of the component. I will show you how to, how you will use titleÂ  inside the template. Let us do this first. Fatima. So, I am going to remove that here,Â  remove that here. I am going to refresh right and you can see nothing happens becauseÂ  we are sending it as title here, but we are not using it here. Now to use it, you have to defineÂ  properties or they are called PROPS. You can for simple ones, you can just define it an arrays anÂ  array and we want to remove. We want to receive title, and we want to bring the title here.  Now I am going to do like a h4, or h3, whatever. And then, like ourÂ  regular property we can use here, and then you can save. Now you can see that youÂ  are sending the property here to the message port, which is defined, and we are using thatÂ  property instead the message board. Okay, there seems to be somethingÂ  wrong. Oh, okay. Syntax error. Okay. So, let us refresh. Okay, now we can see, you can see the name of the board, using theÂ  property. So, that is how you actually send values from the main app into the component.Â  I mean, we just showed it as a title, but this is a way to send details or values,Â  or some data from the main app into the component. You can send many things. You couldÂ  probably send some style elements, for example, or it could send other properties like size, forÂ  example, how big or how small, you want the whole component to be things like that. And then youÂ  can use that here to format it or to make it the way you want, it. Basically, can send all kindsÂ  of data from here to here using properties. You can expand it to, you know, add someÂ  default values, and add some property types, like whether it is a string, integer,Â  etc. but here, I am using simple property. You can explore that by yourself.  Now, I want to do one more thing. Now we have added, like a message board, which worksÂ  independently. Here is one, here, Raj says, hi. Asif, says, hi. Now, I wantÂ  to show a global counter that says, how many messages were received inÂ  total? Currently, we know one message was here, one message is here, one message here. AndÂ  if you see in our component we have computed, but it is at that individual level, thatÂ  individual level, it is not the total overall application s total message received. There is no way to count do that currently. Well, we could do if we could pass onÂ  while, when somebody says, hi, if you could tell that, we have received a messageÂ  back to app saying you have received a message, and then we could count upon show them the totalÂ  message, but there is no, currently, there is no way to send that back. We will see how to doÂ  that. We can do that by emitting the event. I will show you how to emit an event from hereÂ  to do that. You cannot really do for example, if I define data here, like we defined, whichÂ  is a global app-level data, let us say global count is to 0. And then, I can use that here global or let us say total messages issued untilÂ  now. I mean, you can do this let us say what happens. Let us say this is, it is 3 just toÂ  give some significance. It can be any tag. And then if I do, did I save it? Yes. I haveÂ  saved it and let me refresh, so it shows 0. And now if I do Ram, hi, it is not incrementingÂ  because we have not incremented the global count. Now to increment the global count like we didÂ  before, this dot global count is equal to this dot global count plus 1. If we doÂ  that, let us see what happens. Okay, now, hi, Ram, hi. So now nothing happened.Â  Because if you see, this dot global count does not exist here on this, it exists on the app.Â  So, this nothing happens for this. Basically, there is no way to reach the main app using this.Â  So, to reach that app, what we are going to do is, we are going to emit an event. What we are goingÂ  to do is, we are going to call instead of this we are going to say, this dot dollarÂ  emit. This is how you raise an event. What is the name of the event that you wantÂ  to raise? We want to raise add to global total. So, this is the event we want to raise. Let us seeÂ  what happens now when we do this. We are now, hi, Raj. And if I say hi, it did,Â  hi, but if you go to your view, if you go to event, you can see that there is anÂ  event. The event name was add to global total, and it got emitted and the message was message,Â  the source of the emit was a message board, this message board or any messageÂ  board and the payload was array. We are not currently worried about the payload,Â  we just know that the event was raised and, but nothing was done. Because like any event, onceÂ  the event is emitted, you need to handle it. Now, we did learn in the last thing,Â  we could add an event handler by V on, by calling this V on. So, we can do theÂ  same thing. We can call we can use V on and handle the event. Just give me aÂ  second, let us try something V on. It is not actually V colon it is V dash on colon.Â  And what we want, what is the event, we usually used to do, click because we always handle clickÂ  generally. But here, the event name is not click, event name is you know is add to global total.Â  That is the name of the event, you can see here. Name of the event is add to global total.  So that is the same event name we are going to use it here, and then, we are goingÂ  to call a function count global. This is a function that is going to handleÂ  this event. We are going to do the same thing for this too and for this too. Now, letÂ  us see what happened if I call this. I am going to refresh this. Say hi, say Raj. Say hi. Event was raised,Â  but nothing happened. It got raised, but no one handled it. In the console if youÂ  see, there is a event raised but nothing, no count global function to handle it. We haveÂ  not defended function at all. So now we will just define this function. Where do we need toÂ  define this function? Because it is getting called emitted on the top of the event it isÂ  going to be defined at the app level, so we are going to define it here.  So, we are going to define like before, add an attribute called methods within that weÂ  will add a function, the function name will be count global and function. This functionÂ  will not take any input, it will just increment this. This dot global count isÂ  equal to this dot global count plus 1. Just checking all the brackets are closed. Now,Â  I think it should work. Let us see whether it really works. Hi, not hi, Raj says, Hi see itÂ  got incremented here 1 globally. Tej says, Hi, Ruth says, Hi. See, this is how you actually pass the event. YouÂ  do not have to just pass the event, you can also pass data along with the event. You can check outÂ  the details of emit on how to send the data and how to receive the data here and do the data.  For example, if you have a global pool of messages that you want to display on the side,Â  not only individually, but also together, you can do that, I mean, just giving anÂ  example. But if I had a cart, you could add multiple products into the same single cart.Â  Each cart could have, each for example, catalog could have different sections, but there couldÂ  be one total catalog for the whole application. And that is how you send data back. Now, in thisÂ  case, from a component back to the main app. That is it for today. What youÂ  learnt is, how to create a component, how to handle component templates, how to sendÂ  properties to the component from the main app to the component and use that property. Then how toÂ  actually send emit the event and use that event to get data and update the main app. That is all inÂ  today's screencast, See you next time. Thank you.",
        "duration_minutes": 55,
        "keywords": [
          "Vue.js",
          "reactivity",
          "components",
          "data binding",
          "component communication",
          "event handling",
          "state management",
          "Vue instance",
          "emit events"
        ]
      },
      {
        "lecture_id": 8,
        "week_id": 4,
        "order": 2,
        "title": "Advanced Vue.js Components and State Management",
        "resource_type": "pdf",
        "resource_url": "MAD 4.pdf",
        "content_extract": "Vue.js is a progressive JavaScript framework used for building user interfaces by focusing on declarative rendering and reactivity. Declarative rendering allows developers to describe what they want to display, and Vue automatically updates the view in response to changes in the underlying data. This two-way data binding synchronizes the model (data) and the view (UI), ensuring a seamless user experience by automatically reflecting state changes in the user interface. Vueâ€™s reactivity system simplifies the process of updating the DOM by tracking dependencies and optimizing updates through a virtual DOM. This approach allows for efficient, dynamic applications that respond to user input in real-time. User interaction is inherently reactive; when a user logs in, several components of the interface may need to update simultaneouslyâ€”such as the navigation bar displaying logged-in links, updating the available course list, and adapting the visual theme. Traditional server-side rendering involves the server tracking state and generating complete HTML pages based on the current state. In contrast, client-side approaches using JavaScript frameworks like Vue manage these updates on the client device, reducing server load and improving interactivity. Vue directives provide a concise way to bind data to the DOM. The v-bind directive allows for one-way binding, meaning changes in the model reflect in the view. The v-model directive enables two-way binding, which is particularly useful for form inputs like checkboxes and text fields. Event binding is handled using the v-on directive, which listens for user actions and triggers specified event handlers. Vue also offers powerful class and style binding capabilities, enabling dynamic modification of element classes based on the current application state. For example, developers can attach multiple classes using object syntax, where class names are conditionally applied based on the truthiness of their corresponding values. Conditional rendering in Vue is achieved using the v-if and v-show directives. The v-if directive conditionally includes elements in the DOM based on the provided expression, while v-show toggles element visibility using CSS. Although v-if removes and recreates elements as needed, making it more performance-intensive, v-show is more efficient for frequently toggled elements because it keeps the elements in the DOM and simply adjusts their visibility. Looping through data structures is facilitated by the v-for directive, which iterates over arrays, objects, and other JavaScript iterables. Vue allows developers to access the item, its key, and its index during iteration. To optimize DOM updates during iteration, Vue relies on virtual DOM diffing. Providing unique keys using the key attribute ensures that Vue accurately tracks changes and updates only the necessary elements, which improves performance and minimizes re-rendering issues. In the context of the Model-View-ViewModel (MVVM) pattern, the model represents the applicationâ€™s core data, usually stored on the server, while the view is the user-facing presentation layer. However, there are situations where the view requires additional information derived from the model or temporary states not suited for long-term storage. This is where the concept of a ViewModel becomes useful. A ViewModel in Vue combines the core model data with computed or derived properties, facilitating dynamic data binding between the model and the view. For example, a login form with fields for username, password, and repeated password may require temporary storage for the repeated password field, which does not belong to the core model but is necessary for UI validation. Vue instances embody this ViewModel concept, maintaining local state and handling reactivity through its data binding system. Vue provides computed properties to handle derived data that depends on reactive sources. These properties automatically update when their dependencies change and are cached for performance optimization. Developers can also define  'setters ' to modify computed values when necessary. While computed properties are ideal for simple data transformations, watchers are useful for executing more complex logic in response to data changes. Watchers monitor specific properties and trigger custom functions when their values change. Although watchers are powerful, computed properties are generally preferred for their declarative nature and caching benefits. Vue encourages code reuse and modularity through components. Components encapsulate reusable sections of the UI with their own properties (props), local data, computed properties, watchers, and event handlers. Props allow parent components to pass data to child components, while slots provide flexible content distribution for custom layouts. Components follow the  'Donâ€™t Repeat Yourself ' (DRY) principle, enhancing code maintainability and reducing duplication. Vueâ€™s template syntax resembles Jinjaâ€™s, using the double curly brace {{}} syntax for text interpolation. Vue ensures safe rendering by preventing HTML injection and providing error messages for common issues like unclosed tags. For more complex rendering, Vue supports the use of render functions and JSX, which blends JavaScript with HTML, similar to Reactâ€™s approach. Vueâ€™s reactivity system relies on JavaScriptâ€™s object properties. It uses the Object.defineProperty() method to track when data is accessed or modified. This method allows Vue to intercept and react to property changes, ensuring the DOM reflects the latest application state. By wrapping object properties with getter and setter methods, Vue can monitor data access and updates in real-time. This underlying mechanism enables the seamless synchronization of the model and view. For instance, if a count property is defined using Object.defineProperty(), Vue can log property access when the value is read and track modifications when the value is updated. This mechanism forms the backbone of Vueâ€™s reactivity, enabling complex, dynamic user interfaces while maintaining efficient performance. In conclusion, Vue.js offers a powerful and flexible framework for building modern, reactive web applications. Its declarative rendering and reactivity simplify UI development by abstracting complex DOM manipulation. Through directives like v-bind, v-model, and v-on, developers can bind data and events to the DOM effortlessly. Vueâ€™s component-based architecture promotes code reuse, while its reactivity system ensures that the UI remains synchronized with application state. Features like computed properties and watchers provide advanced capabilities for handling derived data and complex interactions. By leveraging these features, developers can build maintainable, high-performance applications that respond dynamically to user input. Vueâ€™s support for the MVVM pattern bridges the gap between the model and the view, providing a clean and scalable architecture for modern web development.",
        "duration_minutes": 60,
        "keywords": [
          "Vue.js",
          "components",
          "state management",
          "vuex",
          "reactivity",
          "computed properties",
          "component communication",
          "props and events",
          "data binding",
          "Vue instance"
        ]
      }
    ],
    "questions": [
      {
        "question_id": 3001,
        "content": "Which of the following correctly declares a variable in modern JavaScript?",
        "type": "MCQ",
        "question_options": [
          "var x = 10;",
          "let x = 10;",
          "const x = 10;",
          "variable x = 10;"
        ],
        "correct_answer": 1,
        "points": 8,
        "explanation": "let is the preferred way to declare a variable in modern JavaScript with block-level scoping.",
        "course_id": 2,
        "week_id": 1,
        "lecture_id": 1,
        "status": "active",
        "tags": ["javascript", "variables", "syntax"]
      },
      {
        "question_id": 3002,
        "content": "Select all valid ways to create a function in JavaScript:",
        "type": "MSQ",
        "question_options": [
          "function add(x, y) { return x + y; }",
          "let add = function(x, y) { return x + y; }",
          "let add = (x, y) => x + y;",
          "add = function(x, y) { return x + y; }"
        ],
        "correct_answer": [0, 1, 2],
        "points": 10,
        "explanation": "Function declaration, function expression, and arrow function are valid function creation methods in JavaScript.",
        "course_id": 2,
        "week_id": 1,
        "lecture_id": 2,
        "status": "active",
        "tags": ["javascript", "functions", "syntax"]
      },
      {
        "question_id": 3003,
        "content": "What will be the output of the following code?\n\nlet arr = [1, 2, 3, 4, 5];\nlet result = arr.filter(x => x > 3).map(x => x * 2);",
        "type": "NUMERIC",
        "question_options": [],
        "correct_answer": 16,
        "points": 12,
        "explanation": "The filter method selects values > 3 ([4, 5]), then map doubles these values to [8, 10]. The result would be 8 + 10 = 18.",
        "course_id": 2,
        "week_id": 2,
        "lecture_id": 3,
        "status": "active",
        "tags": ["javascript", "array methods", "higher-order functions"]
      },
      {
        "question_id": 3004,
        "content": "Which DOM method is used to select an element by its ID?",
        "type": "MCQ",
        "question_options": [
          "document.getElementByID()",
          "document.querySelector('#id')",
          "document.getElementById()",
          "document.findElement()"
        ],
        "correct_answer": 2,
        "points": 8,
        "explanation": "document.getElementById() is the correct method to select an HTML element by its ID.",
        "course_id": 2,
        "week_id": 1,
        "lecture_id": 2,
        "status": "active",
        "tags": ["javascript", "DOM", "selectors"]
      },
      {
        "question_id": 3005,
        "content": "Select all correct ways to parse a JSON string in JavaScript:",
        "type": "MSQ",
        "question_options": [
          "JSON.parse(jsonString)",
          "eval(jsonString)",
          "JSON.stringify(jsonString)",
          "Object.parse(jsonString)"
        ],
        "correct_answer": [0],
        "points": 10,
        "explanation": "JSON.parse() is the correct method to convert a JSON string to a JavaScript object.",
        "course_id": 2,
        "week_id": 2,
        "lecture_id": 4,
        "status": "active",
        "tags": ["javascript", "JSON", "parsing"]
      },
      {
        "question_id": 3006,
        "content": "What will be the total number of iterations in the following for loop?\n\nfor(let i = 0; i < 10; i += 2) { }",
        "type": "NUMERIC",
        "question_options": [],
        "correct_answer": 5,
        "points": 8,
        "explanation": "The loop starts at 0, increments by 2 each time, and stops before 10. So iterations are: 0, 2, 4, 6, 8 (5 iterations total).",
        "course_id": 2,
        "week_id": 1,
        "lecture_id": 2,
        "status": "active",
        "tags": ["javascript", "control flow", "loops"]
      },
      {
        "question_id": 3007,
        "content": "Select the correct methods to add an event listener to a DOM element:",
        "type": "MSQ",
        "question_options": [
          "element.addEventListener('click', handler)",
          "element.onclick = handler",
          "element.attachEvent('click', handler)",
          "element.handleEvent('click', handler)"
        ],
        "correct_answer": [0, 1],
        "points": 10,
        "explanation": "addEventListener() and direct assignment (onclick) are valid ways to add event listeners in modern JavaScript.",
        "course_id": 2,
        "week_id": 1,
        "lecture_id": 2,
        "status": "active",
        "tags": ["javascript", "events", "DOM"]
      },
      {
        "question_id": 3008,
        "content": "What is the output of JSON.stringify({name: 'John', age: undefined})?",
        "type": "MCQ",
        "question_options": [
          "{'name':'John','age':undefined}",
          "{'name':'John'} ",
          "{'name':'John','age':null}",
          "Error "
        ],
        "correct_answer": 1,
        "points": 8,
        "explanation": "undefined values are omitted when stringifying objects in JSON.",
        "course_id": 2,
        "week_id": 2,
        "lecture_id": 4,
        "status": "active",
        "tags": ["javascript", "JSON", "serialization"]
      },
      {
        "question_id": 3009,
        "content": "Select the correct ways to create a deep copy of an object in JavaScript:",
        "type": "MSQ",
        "question_options": [
          "let copy = {...originalObject}",
          "let copy = Object.assign({}, originalObject)",
          "let copy = JSON.parse(JSON.stringify(originalObject))",
          "let copy = originalObject"
        ],
        "correct_answer": [1, 2],
        "points": 10,
        "explanation": "Object.assign() and JSON.parse(JSON.stringify()) can create deep copies of objects, unlike spread operator or direct assignment.",
        "course_id": 2,
        "week_id": 2,
        "lecture_id": 3,
        "status": "active",
        "tags": ["javascript", "objects", "copying"]
      },
      {
        "question_id": 3010,
        "content": "How many potential prototype chain levels exist for an object created with a constructor function?",
        "type": "NUMERIC",
        "question_options": [],
        "correct_answer": 3,
        "points": 12,
        "explanation": "An object typically has 3 prototype levels: the object itself, its constructor's prototype, and Object.prototype.",
        "course_id": 2,
        "week_id": 2,
        "lecture_id": 4,
        "status": "active",
        "tags": ["javascript", "prototypes", "inheritance"]
      },
      {
        "question_id": 3011,
        "content": "What will be the result of the following Promise chain?\n\nPromise.resolve(5)\n  .then(x => x * 2)\n  .then(x => x + 3)",
        "type": "NUMERIC",
        "question_options": [],
        "correct_answer": 13,
        "points": 12,
        "explanation": "The Promise first resolves to 5, then multiplies by 2 (10), then adds 3, resulting in 13.",
        "course_id": 2,
        "week_id": 2,
        "lecture_id": 3,
        "status": "active",
        "tags": ["javascript", "promises", "async programming"]
      },
      {
        "question_id": 3012,
        "content": "Which of the following best describes the Event Loop in JavaScript?",
        "type": "MCQ",
        "question_options": [
          "A mechanism to handle synchronous code execution",
          "A queue that manages asynchronous callbacks",
          "A method to block the main thread",
          "A way to create parallel processing"
        ],
        "correct_answer": 1,
        "points": 10,
        "explanation": "The Event Loop manages the execution of asynchronous callbacks in JavaScript's single-threaded environment.",
        "course_id": 2,
        "week_id": 2,
        "lecture_id": 4,
        "status": "active",
        "tags": ["javascript", "event loop", "async programming"]
      },
      {
        "question_id": 3013,
        "content": "Select the correct ways to import a module in ES6:",
        "type": "MSQ",
        "question_options": [
          "import { func } from './module.js'",
          "const module = require('./module.js')",
          "import * as module from './module.js'",
          "import module from './module.js'"
        ],
        "correct_answer": [0, 2, 3],
        "points": 10,
        "explanation": "ES6 modules support named imports, namespace imports, and default imports.",
        "course_id": 2,
        "week_id": 2,
        "lecture_id": 4,
        "status": "active",
        "tags": ["javascript", "modules", "ES6"]
      },
      {
        "question_id": 3014,
        "content": "What is the output of this closure example?\n\nfunction createCounter() {\n  let count = 0;\n  return function() {\n    return ++count;\n  };\n}\nconst counter = createCounter();\nconsole.log(counter());\nconsole.log(counter());",
        "type": "NUMERIC",
        "question_options": [],
        "correct_answer": 2,
        "points": 12,
        "explanation": "The closure maintains the count variable between calls. First call returns 1, second call returns 2.",
        "course_id": 2,
        "week_id": 2,
        "lecture_id": 4,
        "status": "active",
        "tags": ["javascript", "closures", "scope"]
      },
      {
        "question_id": 3015,
        "content": "Which Vue.js directive creates two-way data binding?",
        "type": "MCQ",
        "question_options": [
          "v-bind",
          "v-model",
          "v-on",
          "v-if"
        ],
        "correct_answer": 1,
        "points": 8,
        "explanation": "v-model creates two-way data binding, typically used with form inputs.",
        "course_id": 2,
        "week_id": 4,
        "lecture_id": 7,
        "status": "active",
        "tags": ["vue.js", "directives", "data binding"]
      },
      {
        "question_id": 3016,
        "content": "Select all valid ways to define a Vue.js component:",
        "type": "MSQ",
        "question_options": [
          "Vue.component('my-component', { ... })",
          "export default { name: 'MyComponent', ... }",
          "new Vue({ components: { MyComponent } })",
          "Vue.extend({ ... })"
        ],
        "correct_answer": [0, 1, 2],
        "points": 10,
        "explanation": "Components can be defined globally, as default exports, or registered in parent components.",
        "course_id": 2,
        "week_id": 4,
        "lecture_id": 8,
        "status": "active",
        "tags": ["vue.js", "components", "registration"]
      },
      {
        "question_id": 3017,
        "content": "What is the primary purpose of computed properties in Vue.js?",
        "type": "MCQ",
        "question_options": [
          "To modify data directly",
          "To create derived values based on existing data",
          "To handle event listeners",
          "To define component methods"
        ],
        "correct_answer": 1,
        "points": 8,
        "explanation": "Computed properties create derived values that automatically update when their dependencies change.",
        "course_id": 2,
        "week_id": 4,
        "lecture_id": 7,
        "status": "active",
        "tags": ["vue.js", "computed properties", "data derivation"]
      },
      {
        "question_id": 3018,
        "content": "Select the correct uses of Vue.js slots:",
        "type": "MSQ",
        "question_options": [
          "Passing content to child components",
          "Defining component templates",
          "Creating named slots",
          "Replacing entire component content"
        ],
        "correct_answer": [0, 2],
        "points": 10,
        "explanation": "Slots are used for passing content to child components and can be named for more specific distribution.",
        "course_id": 2,
        "week_id": 4,
        "lecture_id": 8,
        "status": "active",
        "tags": ["vue.js", "components", "slots"]
      },
      {
        "question_id": 3019,
        "content": "How many watchers can typically be defined in a single Vue component?",
        "type": "NUMERIC",
        "question_options": [],
        "correct_answer": 5,
        "points": 12,
        "explanation": "While there's no strict limit, it's recommended to keep the number of watchers minimal for performance reasons.",
        "course_id": 2,
        "week_id": 4,
        "lecture_id": 7,
        "status": "active",
        "tags": ["vue.js", "watchers", "component design"]
      },
      {
        "question_id": 3020,
        "content": "What is the difference between a watcher and a computed property in Vue.js?",
        "type": "MCQ",
        "question_options": [
          "Watchers can perform side effects, computed properties cannot",
          "Computed properties are cached, watchers are not",
          "Watchers can only watch primitive values",
          "Computed properties cannot have setters"
        ],
        "correct_answer": 0,
        "points": 10,
        "explanation": "Watchers allow for side effects and more complex logic, while computed properties are primarily for deriving values.",
        "course_id": 2,
        "week_id": 4,
        "lecture_id": 7,
        "status": "active",
        "tags": ["vue.js", "watchers", "computed properties"]
      },
      {
        "question_id": 3021,
        "content": "What will be the final value after executing this Promise?",
        "type": "NUMERIC",
        "question_options": [],
        "correct_answer": 50,
        "points": 12,
        "explanation": "An async function always returns a Promise. This example demonstrates Promise resolution with a numeric value.",
        "course_id": 2,
        "week_id": 2,
        "lecture_id": 3,
        "status": "active",
        "tags": ["javascript", "promises", "async/await"]
      },
      {
        "question_id": 3022,
        "content": "Which method creates a deep copy of an object that maintains prototype chain?",
        "type": "MCQ",
        "question_options": [
          "Object.assign()",
          "JSON.parse(JSON.stringify())",
          "Object.create()",
          "Spread operator (...)"
        ],
        "correct_answer": 2,
        "points": 10,
        "explanation": "Object.create() can create a new object with a specific prototype, maintaining the prototype chain.",
        "course_id": 2,
        "week_id": 2,
        "lecture_id": 4,
        "status": "active",
        "tags": ["javascript", "objects", "prototypes"]
      },
      {
        "question_id": 3023,
        "content": "How many possible combination states exist for a Vue.js component with 3 boolean props?",
        "type": "NUMERIC",
        "question_options": [],
        "correct_answer": 8,
        "points": 12,
        "explanation": "With 3 boolean props, there are 2Â³ = 8 possible combination states.",
        "course_id": 2,
        "week_id": 4,
        "lecture_id": 8,
        "status": "active",
        "tags": ["vue.js", "components", "props"]
      },
      {
        "question_id": 3024,
        "content": "Select all characteristics of an ES6 module:",
        "type": "MSQ",
        "question_options": [
          "Strict mode by default",
          "Can have multiple default exports",
          "Supports named exports",
          "Can be loaded asynchronously"
        ],
        "correct_answer": [0, 2, 3],
        "points": 10,
        "explanation": "ES6 modules are in strict mode, support named exports, and can be loaded asynchronously.",
        "course_id": 2,
        "week_id": 2,
        "lecture_id": 4,
        "status": "active",
        "tags": ["javascript", "modules", "ES6"]
      },
      {
        "question_id": 3025,
        "content": "What is the primary purpose of a Vue.js watcher?",
        "type": "MCQ",
        "question_options": [
          "To compute derived values",
          "To perform side effects when data changes",
          "To create two-way data binding",
          "To validate component props"
        ],
        "correct_answer": 1,
        "points": 8,
        "explanation": "Watchers are primarily used to perform side effects or additional logic when a data property changes.",
        "course_id": 2,
        "week_id": 4,
        "lecture_id": 7,
        "status": "active",
        "tags": ["vue.js", "watchers", "reactivity"]
      }
    ],
    "assignments": [
      {
        "assignment_id": 3001,
        "week_id": 1,
        "title": "JavaScript Fundamentals: Syntax and Control Flow",
        "description": "Practice JavaScript basics, focusing on syntax, variables, control flow, and basic function concepts.",
        "type": "practice",
        "due_date": "2025-04-05",
        "start_date": "2025-03-29",
        "is_published": true,
        "question_ids": [3001, 3002, 3006, 3007, 3009],
        "course_id": 2
      },
      {
        "assignment_id": 3002,
        "week_id": 1,
        "title": "DOM Manipulation and Event Handling",
        "description": "Explore JavaScript DOM interactions, event handling, and basic object manipulation.",
        "type": "practice",
        "due_date": "2025-04-12",
        "start_date": "2025-04-05",
        "is_published": true,
        "question_ids": [3004, 3007, 3003, 3008, 3010],
        "course_id": 2
      },
      {
        "assignment_id": 3003,
        "week_id": 1,
        "title": "JavaScript Data Processing and JSON",
        "description": "Practice working with iteration methods, JSON parsing, and object manipulation.",
        "type": "practice",
        "due_date": "2025-04-19",
        "start_date": "2025-04-12",
        "is_published": true,
        "question_ids": [3003, 3005, 3008, 3009, 3010],
        "course_id": 2
      },
      {
        "assignment_id": 3004,
        "week_id": 2,
        "title": "Advanced JavaScript: Async Programming and Modules",
        "description": "Explore asynchronous programming, Promises, Event Loop, and ES6 module systems.",
        "type": "graded",
        "due_date": "2025-04-26",
        "start_date": "2025-04-19",
        "is_published": true,
        "question_ids": [3011, 3012, 3013, 3014, 3024],
        "course_id": 2
      },
      {
        "assignment_id": 3005,
        "week_id": 4,
        "title": "Vue.js: Components, Computed Properties, and Reactivity",
        "description": "Master Vue.js component design, computed properties, watchers, and advanced rendering techniques.",
        "type": "graded",
        "due_date": "2025-05-03",
        "start_date": "2025-04-26",
        "is_published": true,
        "question_ids": [3015, 3016, 3017, 3018, 3019, 3020, 3022, 3023, 3025],
        "course_id": 2
      }
    ]
  ,
     "personal_resources": [
         {
             "resource_id": 1,
             "name": "MAD-II Study Notes",
             "description": "Comprehensive notes and examples from Modern Application Development II course, focusing on JavaScript and Vue.js fundamentals, advanced topics, and best practices.",
             "course_id": 2,
             "user_id": 2002,
             "is_active": true,
             "LLM_Summary": {
                 "summary": "Extensive study resource covering foundational and advanced topics in JavaScript and Vue.js. This resource provides in-depth explanations, real-world examples, and practical code snippets for building modern web applications. It explores JavaScriptâ€™s origins, syntax, and core concepts like data types, scope, and functional programming. It also dives into Vue.js, focusing on reactive programming, component architecture, state management, and event-driven design patterns. Emphasis is placed on understanding how JavaScript interacts with the DOM and the advantages of using a declarative programming style in building responsive, user-centric applications.",
                 "concepts_covered": [
                     "JavaScript history and origins",
                     "JavaScript syntax and structure",
                     "Data types and type coercion",
                     "Scope management (var, let, const)",
                     "Functions and asynchronous programming",
                     "Functional programming techniques (map, filter, reduce)",
                     "Object manipulation and destructuring",
                     "Vue.js fundamentals and reactivity system",
                     "Component creation and communication (props, events)",
                     "State management in Vue (local vs. global state)",
                     "Handling DOM interactions with JavaScript",
                     "Declarative vs. imperative programming paradigms",
                     "Event handling and lifecycle methods",
                     "Best practices in frontend architecture and design"
                 ],
                 "concepts_not_covered": [
                     "Advanced Vuex store patterns",
                     "Server-side rendering (SSR) in Vue.js",
                     "Performance optimization and memory management",
                     "Security practices for frontend applications",
                     "Complex asynchronous workflows (e.g., Promises chaining)"
                 ]
             }
         }
     ],
     "personal_resource_files": [
         {
             "file_id": 1,
             "resource_id": 1,
             "name": "JavaScript Fundamentals",
             "type": "text",
             "content": "# JavaScript Basics\n\n## Core Concepts\n- Variables and Scope (var, let, const)\n- Data Types and Type Coercion\n- Functions and Closures\n- Asynchronous Programming (Callbacks, Promises, async/await)\n\n### Advanced Topics\n- Functional Programming (map, filter, reduce)\n- Object Manipulation and Destructuring\n- Comparison Operators (== vs. ===)\n\n[Detailed personal notes covering syntax examples and real-world use cases...]",
             "file_type": "text/markdown",
             "file_size": 6144
         },
         {
             "file_id": 2,
             "resource_id": 1,
             "name": "Vue.js Component Examples",
             "type": "file",
             "content": "Collection of Vue.js component examples, including message boards, prop handling, and event emission. Demonstrates key concepts like component registration, lifecycle methods, and advanced data binding.",
             "file_path": "/uploads/user2002/mad2/vue_components.js",
             "file_type": "text/javascript",
             "file_size": 8192
         },
         {
             "file_id": 3,
             "resource_id": 1,
             "name": "Frontend Design and Architecture",
             "type": "text",
             "content": "# Frontend Architecture and Design Principles\n\n## Key Topics\n- MVC vs. MVVM Patterns\n- Declarative vs. Imperative Programming\n- Component-based Design in Vue.js\n- Best Practices for Frontend State Management\n\n### Additional Insights\n- Handling Global State with Vue Emit Events\n- Using Scoped Slots for Flexible Components\n\n[Comprehensive architectural guidelines and design best practices...]",
             "file_type": "text/markdown",
             "file_size": 5120
         },
         {
             "file_id": 4,
             "resource_id": 1,
             "name": "JavaScript Collections and Iteration",
             "type": "text",
             "content": "# JavaScript Collections and Iteration\n\n## Concepts Covered\n- Arrays and Iterables\n- Map, Filter, and Reduce Methods\n- Destructuring Arrays and Objects\n- Using Generators for Iteration\n\n[In-depth explanations with code examples illustrating modern iteration patterns...]",
             "file_type": "text/markdown",
             "file_size": 4096
         }
     ]
 }